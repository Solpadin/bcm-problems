# Save by Dima on Mon Apr 23 09:45:02 2012
from abaqus import *
upgradeMdb(
    'C:/Users/Dima/Programs/Mpls_all/Exe/Seepage/Solid/Seepage-6.9-EF2.cae', 
    'C:/Users/Dima/Programs/Mpls_all/Exe/Seepage/Solid/Seepage.cae')
# Save by Dima on Mon Apr 23 09:45:03 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Seepage'].Part(name='Box-failed', objectToCopy=
    mdb.models['Seepage'].parts['Box'])
mdb.models['Seepage'].parts['Box-failed'].Unlock(reportWarnings=False)
del mdb.models['Seepage'].parts['Box']
mdb.models['Seepage'].parts.changeKey(fromName='Box-failed', toName='Box')
mdb.models['Seepage'].Part(name='Cylinder-failed', objectToCopy=
    mdb.models['Seepage'].parts['Cylinder'])
mdb.models['Seepage'].parts['Cylinder-failed'].Unlock(reportWarnings=False)
del mdb.models['Seepage'].parts['Cylinder']
mdb.models['Seepage'].parts.changeKey(fromName='Cylinder-failed', toName=
    'Cylinder')
mdb.models['Seepage'].Part(name='Filtr_C40-failed', objectToCopy=
    mdb.models['Seepage'].parts['Filtr_C40'])
mdb.models['Seepage'].parts['Filtr_C40-failed'].Unlock(reportWarnings=False)
del mdb.models['Seepage'].parts['Filtr_C40']
mdb.models['Seepage'].parts.changeKey(fromName='Filtr_C40-failed', toName=
    'Filtr_C40')
mdb.models['Seepage'].Part(name='Filtr_C40_half-failed', objectToCopy=
    mdb.models['Seepage'].parts['Filtr_C40_half'])
mdb.models['Seepage'].parts['Filtr_C40_half-failed'].Unlock(reportWarnings=
    False)
del mdb.models['Seepage'].parts['Filtr_C40_half']
mdb.models['Seepage'].parts.changeKey(fromName='Filtr_C40_half-failed', toName=
    'Filtr_C40_half')
mdb.models['Seepage'].Part(name='Filtr_R65-failed', objectToCopy=
    mdb.models['Seepage'].parts['Filtr_R65'])
mdb.models['Seepage'].parts['Filtr_R65-failed'].Unlock(reportWarnings=False)
del mdb.models['Seepage'].parts['Filtr_R65']
mdb.models['Seepage'].parts.changeKey(fromName='Filtr_R65-failed', toName=
    'Filtr_R65')
mdb.models['Seepage'].Part(name='Filtr_R65_full-failed', objectToCopy=
    mdb.models['Seepage'].parts['Filtr_R65_full'])
mdb.models['Seepage'].parts['Filtr_R65_full-failed'].Unlock(reportWarnings=
    False)
del mdb.models['Seepage'].parts['Filtr_R65_full']
mdb.models['Seepage'].parts.changeKey(fromName='Filtr_R65_full-failed', toName=
    'Filtr_R65_full')
mdb.models['Seepage'].Part(name='Filtr_R65_half-failed', objectToCopy=
    mdb.models['Seepage'].parts['Filtr_R65_half'])
mdb.models['Seepage'].parts['Filtr_R65_half-failed'].Unlock(reportWarnings=
    False)
del mdb.models['Seepage'].parts['Filtr_R65_half']
mdb.models['Seepage'].parts.changeKey(fromName='Filtr_R65_half-failed', toName=
    'Filtr_R65_half')
mdb.models['Seepage'].Part(name='Filtr_R65_quarter-failed', objectToCopy=
    mdb.models['Seepage'].parts['Filtr_R65_quarter'])
mdb.models['Seepage'].parts['Filtr_R65_quarter-failed'].Unlock(reportWarnings=
    False)
del mdb.models['Seepage'].parts['Filtr_R65_quarter']
mdb.models['Seepage'].parts.changeKey(fromName='Filtr_R65_quarter-failed', 
    toName='Filtr_R65_quarter')
mdb.models['Seepage'].Part(name='Flow_C40-failed', objectToCopy=
    mdb.models['Seepage'].parts['Flow_C40'])
mdb.models['Seepage'].parts['Flow_C40-failed'].Unlock(reportWarnings=False)
del mdb.models['Seepage'].parts['Flow_C40']
mdb.models['Seepage'].parts.changeKey(fromName='Flow_C40-failed', toName=
    'Flow_C40')
mdb.models['Seepage'].Part(name='Flow_R60-failed', objectToCopy=
    mdb.models['Seepage'].parts['Flow_R60'])
mdb.models['Seepage'].parts['Flow_R60-failed'].Unlock(reportWarnings=False)
del mdb.models['Seepage'].parts['Flow_R60']
mdb.models['Seepage'].parts.changeKey(fromName='Flow_R60-failed', toName=
    'Flow_R60')
mdb.models['Seepage'].Part(name='Flow_R65-failed', objectToCopy=
    mdb.models['Seepage'].parts['Flow_R65'])
mdb.models['Seepage'].parts['Flow_R65-failed'].Unlock(reportWarnings=False)
del mdb.models['Seepage'].parts['Flow_R65']
mdb.models['Seepage'].parts.changeKey(fromName='Flow_R65-failed', toName=
    'Flow_R65')
mdb.models['Seepage'].Part(name='Flow_R65_full-failed', objectToCopy=
    mdb.models['Seepage'].parts['Flow_R65_full'])
mdb.models['Seepage'].parts['Flow_R65_full-failed'].Unlock(reportWarnings=
    False)
del mdb.models['Seepage'].parts['Flow_R65_full']
mdb.models['Seepage'].parts.changeKey(fromName='Flow_R65_full-failed', toName=
    'Flow_R65_full')
mdb.models['Seepage'].Part(name='Flow_R70-failed', objectToCopy=
    mdb.models['Seepage'].parts['Flow_R70'])
mdb.models['Seepage'].parts['Flow_R70-failed'].Unlock(reportWarnings=False)
del mdb.models['Seepage'].parts['Flow_R70']
mdb.models['Seepage'].parts.changeKey(fromName='Flow_R70-failed', toName=
    'Flow_R70')
mdb.models['Seepage'].Part(name='Part-1-failed', objectToCopy=
    mdb.models['Seepage'].parts['Part-1'])
mdb.models['Seepage'].parts['Part-1-failed'].Unlock(reportWarnings=False)
del mdb.models['Seepage'].parts['Part-1']
mdb.models['Seepage'].parts.changeKey(fromName='Part-1-failed', toName=
    'Part-1')
mdb.models['Seepage'].Part(name='Part-2-failed', objectToCopy=
    mdb.models['Seepage'].parts['Part-2'])
mdb.models['Seepage'].parts['Part-2-failed'].Unlock(reportWarnings=False)
del mdb.models['Seepage'].parts['Part-2']
mdb.models['Seepage'].parts.changeKey(fromName='Part-2-failed', toName=
    'Part-2')
mdb.models['Seepage'].Part(name='Seepage-failed', objectToCopy=
    mdb.models['Seepage'].parts['Seepage'])
mdb.models['Seepage'].parts['Seepage-failed'].Unlock(reportWarnings=False)
del mdb.models['Seepage'].parts['Seepage']
mdb.models['Seepage'].parts.changeKey(fromName='Seepage-failed', toName=
    'Seepage')
mdb.models['Seepage'].Part(name='Sphere-failed', objectToCopy=
    mdb.models['Seepage'].parts['Sphere'])
mdb.models['Seepage'].parts['Sphere-failed'].Unlock(reportWarnings=False)
del mdb.models['Seepage'].parts['Sphere']
mdb.models['Seepage'].parts.changeKey(fromName='Sphere-failed', toName=
    'Sphere')
mdb.models['Seepage'].rootAssembly.regenerate()
#* FeatureError: The assembly is locked and cannot be regenerated.
mdb.models['Seepage'].rootAssembly.unlock()
mdb.models['Seepage'].rootAssembly.features['Part-1-1'].resume()
mdb.models['Seepage'].rootAssembly.features['Part-1-1'].suppress()
mdb.models['Seepage'].rootAssembly.features['Seepage-4'].resume()
mdb.models['Seepage'].rootAssembly.features['Seepage-4'].suppress()
mdb.models['Seepage'].rootAssembly.features['Flow-1'].resume()
mdb.models['Seepage'].rootAssembly.features['Flow-1'].suppress()
mdb.models['Seepage'].rootAssembly.features['Filtr_R65_full-1'].resume()
mdb.models['Seepage'].rootAssembly.features['Filtr_R65_full-1'].suppress()
mdb.models['Seepage'].rootAssembly.features['Seepage-4'].resume()
mdb.models['Seepage'].rootAssembly.features['Seepage-4'].suppress()
mdb.models['Seepage'].rootAssembly.features['Flow-2'].resume()
mdb.models['Seepage'].rootAssembly.features['Flow-2'].suppress()
# Save by Dima on Mon Apr 23 09:58:55 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Seepage'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Seepage'].parts['Box'].features['Solid extrude-1'].sketch)
mdb.models['Seepage'].parts['Box'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Seepage'].sketches['__edit__'], 
    upToFeature=mdb.models['Seepage'].parts['Box'].features['Solid extrude-1'])
del mdb.models['Seepage'].sketches['__edit__']
mdb.models['Seepage'].rootAssembly.suppressFeatures(('Part-2-1', 'Part-2-2'))
mdb.models['Seepage'].rootAssembly.features['Box-1'].resume()
mdb.models['Seepage'].rootAssembly.features['Sphere-1'].resume()
mdb.models['Seepage'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Seepage'].parts['Sphere'].features['Solid revolve-1'].sketch)
mdb.models['Seepage'].parts['Sphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Seepage'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Seepage'].parts['Sphere'].features['Solid revolve-1'])
mdb.models['Seepage'].sketches['__edit__'].dimensions[0].setValues(value=0.3)
mdb.models['Seepage'].parts['Sphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Seepage'].sketches['__edit__'])
del mdb.models['Seepage'].sketches['__edit__']
mdb.models['Seepage'].parts['Sphere'].regenerate()
mdb.models['Seepage'].rootAssembly.regenerate()
mdb.models['Seepage'].rootAssembly.regenerate()
mdb.models['Seepage'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Seepage'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Seepage'].rootAssembly.instances['Box-1'], 
    name='Flow_R30', originalInstances=SUPPRESS)
mdb.models['Seepage'].parts['Flow_R30'].DatumPlaneByThreePoints(point1=
    mdb.models['Seepage'].parts['Flow_R30'].InterestingPoint(
    mdb.models['Seepage'].parts['Flow_R30'].edges[3], MIDDLE), point2=
    mdb.models['Seepage'].parts['Flow_R30'].InterestingPoint(
    mdb.models['Seepage'].parts['Flow_R30'].edges[8], MIDDLE), point3=
    mdb.models['Seepage'].parts['Flow_R30'].InterestingPoint(
    mdb.models['Seepage'].parts['Flow_R30'].edges[1], MIDDLE))
mdb.models['Seepage'].parts['Flow_R30'].DatumPlaneByThreePoints(point1=
    mdb.models['Seepage'].parts['Flow_R30'].InterestingPoint(
    mdb.models['Seepage'].parts['Flow_R30'].edges[10], MIDDLE), point2=
    mdb.models['Seepage'].parts['Flow_R30'].InterestingPoint(
    mdb.models['Seepage'].parts['Flow_R30'].edges[11], MIDDLE), point3=
    mdb.models['Seepage'].parts['Flow_R30'].InterestingPoint(
    mdb.models['Seepage'].parts['Flow_R30'].edges[4], MIDDLE))
mdb.models['Seepage'].parts['Flow_R30'].DatumPlaneByThreePoints(point1=
    mdb.models['Seepage'].parts['Flow_R30'].InterestingPoint(
    mdb.models['Seepage'].parts['Flow_R30'].edges[2], MIDDLE), point2=
    mdb.models['Seepage'].parts['Flow_R30'].InterestingPoint(
    mdb.models['Seepage'].parts['Flow_R30'].edges[0], MIDDLE), point3=
    mdb.models['Seepage'].parts['Flow_R30'].InterestingPoint(
    mdb.models['Seepage'].parts['Flow_R30'].edges[7], MIDDLE))
mdb.models['Seepage'].parts['Flow_R30'].PartitionCellByDatumPlane(cells=
    mdb.models['Seepage'].parts['Flow_R30'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), datumPlane=mdb.models['Seepage'].parts['Flow_R30'].datums[2])
mdb.models['Seepage'].parts['Flow_R30'].PartitionCellByDatumPlane(cells=
    mdb.models['Seepage'].parts['Flow_R30'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), datumPlane=mdb.models['Seepage'].parts['Flow_R30'].datums[4])
del mdb.models['Seepage'].parts['Flow_R30'].features['Partition cell-2']
mdb.models['Seepage'].parts['Flow_R30'].PartitionCellByDatumPlane(cells=
    mdb.models['Seepage'].parts['Flow_R30'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), datumPlane=mdb.models['Seepage'].parts['Flow_R30'].datums[3])
mdb.models['Seepage'].parts['Flow_R30'].PartitionCellByDatumPlane(cells=
    mdb.models['Seepage'].parts['Flow_R30'].cells.getSequenceFromMask(('[#f ]', 
    ), ), datumPlane=mdb.models['Seepage'].parts['Flow_R30'].datums[4])
mdb.models['Seepage'].parts['Flow_R30'].DatumPlaneByThreePoints(point1=
    mdb.models['Seepage'].parts['Flow_R30'].vertices[31], point2=
    mdb.models['Seepage'].parts['Flow_R30'].vertices[15], point3=
    mdb.models['Seepage'].parts['Flow_R30'].vertices[25])
mdb.models['Seepage'].parts['Flow_R30'].DatumPlaneByThreePoints(point1=
    mdb.models['Seepage'].parts['Flow_R30'].vertices[19], point2=
    mdb.models['Seepage'].parts['Flow_R30'].vertices[22], point3=
    mdb.models['Seepage'].parts['Flow_R30'].vertices[17])
mdb.models['Seepage'].parts['Flow_R30'].DatumPlaneByThreePoints(point1=
    mdb.models['Seepage'].parts['Flow_R30'].vertices[13], point2=
    mdb.models['Seepage'].parts['Flow_R30'].vertices[19], point3=
    mdb.models['Seepage'].parts['Flow_R30'].vertices[31])
mdb.models['Seepage'].parts['Flow_R30'].DatumPlaneByThreePoints(point1=
    mdb.models['Seepage'].parts['Flow_R30'].vertices[15], point2=
    mdb.models['Seepage'].parts['Flow_R30'].vertices[17], point3=
    mdb.models['Seepage'].parts['Flow_R30'].vertices[25])
mdb.models['Seepage'].parts['Flow_R30'].DatumPlaneByThreePoints(point1=
    mdb.models['Seepage'].parts['Flow_R30'].vertices[31], point2=
    mdb.models['Seepage'].parts['Flow_R30'].vertices[17], point3=
    mdb.models['Seepage'].parts['Flow_R30'].vertices[13])
mdb.models['Seepage'].parts['Flow_R30'].DatumPlaneByThreePoints(point1=
    mdb.models['Seepage'].parts['Flow_R30'].vertices[15], point2=
    mdb.models['Seepage'].parts['Flow_R30'].vertices[19], point3=
    mdb.models['Seepage'].parts['Flow_R30'].vertices[25])
mdb.models['Seepage'].parts['Flow_R30'].PartitionCellByDatumPlane(cells=
    mdb.models['Seepage'].parts['Flow_R30'].cells.getSequenceFromMask((
    '[#ff ]', ), ), datumPlane=
    mdb.models['Seepage'].parts['Flow_R30'].datums[9])
mdb.models['Seepage'].parts['Flow_R30'].PartitionCellByDatumPlane(cells=
    mdb.models['Seepage'].parts['Flow_R30'].cells.getSequenceFromMask((
    '[#fff ]', ), ), datumPlane=
    mdb.models['Seepage'].parts['Flow_R30'].datums[10])
mdb.models['Seepage'].parts['Flow_R30'].PartitionCellByDatumPlane(cells=
    mdb.models['Seepage'].parts['Flow_R30'].cells.getSequenceFromMask((
    '[#ffff ]', ), ), datumPlane=
    mdb.models['Seepage'].parts['Flow_R30'].datums[11])
mdb.models['Seepage'].parts['Flow_R30'].PartitionCellByDatumPlane(cells=
    mdb.models['Seepage'].parts['Flow_R30'].cells.getSequenceFromMask((
    '[#ffffff ]', ), ), datumPlane=
    mdb.models['Seepage'].parts['Flow_R30'].datums[12])
mdb.models['Seepage'].parts['Flow_R30'].PartitionCellByDatumPlane(cells=
    mdb.models['Seepage'].parts['Flow_R30'].cells.getSequenceFromMask((
    '[#ffffffff ]', ), ), datumPlane=
    mdb.models['Seepage'].parts['Flow_R30'].datums[13])
mdb.models['Seepage'].parts['Flow_R30'].PartitionCellByDatumPlane(cells=
    mdb.models['Seepage'].parts['Flow_R30'].cells.getSequenceFromMask((
    '[#ffffffff #ff ]', ), ), datumPlane=
    mdb.models['Seepage'].parts['Flow_R30'].datums[14])
mdb.models['Seepage'].parts['Flow_R30'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.1)
mdb.models['Seepage'].parts['Flow_R30'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.2)
mdb.models['Seepage'].parts['Flow_R30'].generateMesh()
mdb.models['Seepage'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Filtr_R65_full_M960', toName='Flow_R30_full_M394')
mdb.jobs.changeKey(fromName='Flow_R30_full_M394', toName='Flow_R30_full_M384')
mdb.models['Seepage'].parts['Flow_R30'].deleteMesh()
mdb.models['Seepage'].parts['Flow_R30'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.5)
mdb.models['Seepage'].parts['Flow_R30'].generateMesh()
mdb.models['Seepage'].rootAssembly.regenerate()
mdb.models['Seepage'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Flow_R30_full_M384', toName='Flow_R30_full_M288')
mdb.models['Seepage'].parts['Flow_R30'].deleteMesh()
mdb.models['Seepage'].parts['Flow_R30'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.1)
mdb.models['Seepage'].parts['Flow_R30'].generateMesh()
mdb.models['Seepage'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Flow_R30_full_M288', toName='Flow_R30_full_M1920')
mdb.models['Seepage'].rootAssembly.regenerate()
# Save by Dima on Wed Apr 25 20:42:34 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Seepage'].parts.changeKey(fromName='Flow_R30', toName=
    'Flow_R30_full')
mdb.models['Seepage'].Part(name='Flow_R30_half', objectToCopy=
    mdb.models['Seepage'].parts['Flow_R30_full'])
mdb.models['Seepage'].parts['Flow_R30_half'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Seepage'].parts['Flow_R30_half'].faces.getSequenceFromMask(
    mask=('[#780441e #240e1011 #c709ea #9289660c #404d2063 #9a ]', ), ))
mdb.models['Seepage'].parts['Flow_R30_half'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Seepage'].parts['Flow_R30_half'].faces.getSequenceFromMask(
    mask=('[#4b004b0 #11618900 #28088600 #220 ]', ), ))
mdb.models['Seepage'].parts.changeKey(fromName='Flow_R30_half', toName=
    'Flow_R30_halfp')
mdb.models['Seepage'].Part(compressFeatureList=ON, name='Flow_R30_half', 
    objectToCopy=mdb.models['Seepage'].parts['Flow_R30_halfp'])
del mdb.models['Seepage'].parts['Flow_R30_half']
mdb.models['Seepage'].parts.changeKey(fromName='Flow_R30_halfp', toName=
    'Flow_R30_half')
mdb.models['Seepage'].parts['Flow_R30_half'].generateMesh()
mdb.models['Seepage'].Part(name='Flow_R30_quarter', objectToCopy=
    mdb.models['Seepage'].parts['Flow_R30_full'])
mdb.models['Seepage'].parts['Flow_R30_quarter'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Seepage'].parts['Flow_R30_quarter'].faces.getSequenceFromMask(
    mask=('[#3c6ea9e3 #cff1ffe8 #ff683e01 #e55695f3 #a7baf58c #75 ]', ), ))
del mdb.models['Seepage'].parts['Flow_R30_quarter'].features['Remove faces-1']
mdb.models['Seepage'].parts['Flow_R30_quarter'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Seepage'].parts['Flow_R30_quarter'].faces.getSequenceFromMask(
    mask=('[#386ea0e1 #caf1eda8 #fb283601 #655681f3 #a2b2558c #65 ]', ), ))
mdb.models['Seepage'].parts['Flow_R30_quarter'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Seepage'].parts['Flow_R30_quarter'].faces.getSequenceFromMask(
    mask=('[#fff0cf0c #c464001f #1ec668 ]', ), ))
mdb.models['Seepage'].parts['Flow_R30_quarter'].generateMesh()
mdb.models['Seepage'].Part(name='Flow_R30_octa', objectToCopy=
    mdb.models['Seepage'].parts['Flow_R30_quarter'])
mdb.models['Seepage'].parts['Flow_R30_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Seepage'].parts['Flow_R30_octa'].faces.getSequenceFromMask(
    mask=('[#e00f6fc0 #93b ]', ), ))
mdb.models['Seepage'].parts['Flow_R30_octa'].generateMesh()
mdb.models['Seepage'].rootAssembly.regenerate()
mdb.models['Seepage'].rootAssembly.features['Flow_R30-1'].suppress()
mdb.models['Seepage'].rootAssembly.Instance(dependent=ON, name=
    'Flow_R30_octa-1', part=mdb.models['Seepage'].parts['Flow_R30_octa'])
mdb.jobs.changeKey(fromName='Flow_R30_full_M1920', toName='Flow_R30_octa_M188')
mdb.models['Seepage'].parts['Flow_R30_octa'].deleteMesh()
mdb.models['Seepage'].parts['Flow_R30_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.08)
mdb.models['Seepage'].parts['Flow_R30_octa'].generateMesh()
mdb.models['Seepage'].parts['Flow_R30_octa'].deleteMesh()
mdb.models['Seepage'].parts['Flow_R30_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05)
mdb.models['Seepage'].parts['Flow_R30_octa'].generateMesh()
mdb.models['Seepage'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Flow_R30_octa_M188', toName='Flow_R30_octa_M1890')
mdb.models['Seepage'].parts['Flow_R30_octa'].deleteMesh()
mdb.models['Seepage'].parts['Flow_R30_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.06)
mdb.models['Seepage'].parts['Flow_R30_octa'].generateMesh()
mdb.models['Seepage'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Flow_R30_octa_M1890', toName=
    'Flow_R30_octa_M1025')
# Save by Dima on Fri Apr 27 18:25:24 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Seepage'].Part(name='Filtr_R65_octa', objectToCopy=
    mdb.models['Seepage'].parts['Filtr_R65_quarter'])
mdb.models['Seepage'].parts['Filtr_R65_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Seepage'].parts['Filtr_R65_octa'].faces.getSequenceFromMask(
    mask=('[#1603f87c #1588 ]', ), ))
del mdb.models['Seepage'].parts['Filtr_R65_octa'].features['Remove faces-1']
mdb.models['Seepage'].parts['Filtr_R65_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Seepage'].parts['Filtr_R65_octa'].faces.getSequenceFromMask(
    mask=('[#1e03f87c #158c ]', ), ))
mdb.models['Seepage'].parts['Filtr_R65_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.04)
mdb.models['Seepage'].parts['Filtr_R65_octa'].generateMesh()
mdb.models['Seepage'].rootAssembly.features['Flow_R30_octa-1'].suppress()
mdb.models['Seepage'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R65_octa-1', part=mdb.models['Seepage'].parts['Filtr_R65_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Seepage', modelPrint=OFF, multiprocessingMode=DEFAULT, 
    name='Filtr_R65_octa_M660', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Seepage'].parts['Filtr_R65_octa'].deleteMesh()
mdb.models['Seepage'].parts['Filtr_R65_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.03)
mdb.models['Seepage'].parts['Filtr_R65_octa'].generateMesh()
mdb.models['Seepage'].parts['Filtr_R65_octa'].deleteMesh()
mdb.models['Seepage'].parts['Filtr_R65_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.04)
mdb.models['Seepage'].parts['Filtr_R65_octa'].generateMesh()
mdb.models['Seepage'].parts['Filtr_R65_octa'].deleteMesh()
mdb.models['Seepage'].parts['Filtr_R65_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.02)
mdb.models['Seepage'].parts['Filtr_R65_octa'].generateMesh()
mdb.models['Seepage'].parts['Filtr_R65_octa'].deleteMesh()
mdb.models['Seepage'].parts['Filtr_R65_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.025)
mdb.models['Seepage'].parts['Filtr_R65_octa'].generateMesh()
mdb.models['Seepage'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Filtr_R65_octa_M660', toName=
    'Filtr_R65_octa_M1152')
mdb.models['Seepage'].parts['Filtr_R65_octa'].deleteMesh()
mdb.models['Seepage'].parts['Filtr_R65_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.02)
mdb.models['Seepage'].parts['Filtr_R65_octa'].generateMesh()
mdb.models['Seepage'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Filtr_R65_octa_M1152', toName=
    'Filtr_R65_octa_M2280')
# Save by Dima on Fri Apr 27 22:00:45 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='Filtration', objectToCopy=mdb.models['Seepage'])
del mdb.models['Filtration'].parts['Cylinder']
del mdb.models['Filtration'].parts['Filtr_C40']
del mdb.models['Filtration'].parts['Filtr_C40_half']
del mdb.models['Filtration'].parts['Filtr_R65']
del mdb.models['Filtration'].parts['Filtr_R65_full']
del mdb.models['Filtration'].parts['Filtr_R65_quarter']
del mdb.models['Filtration'].parts['Filtr_R65_half']
del mdb.models['Filtration'].parts['Flow_C40']
del mdb.models['Filtration'].parts['Flow_R30_full']
del mdb.models['Filtration'].parts['Flow_R30_half']
del mdb.models['Filtration'].parts['Flow_R30_quarter']
del mdb.models['Filtration'].parts['Flow_R65_full']
del mdb.models['Filtration'].parts['Part-1']
del mdb.models['Filtration'].parts['Part-2']
del mdb.models['Filtration'].parts['Seepage']
mdb.models['Filtration'].Part(name='Flow_R30', objectToCopy=
    mdb.models['Filtration'].parts['Flow_R30_octa'])
mdb.models['Filtration'].parts.changeKey(fromName='Flow_R65', toName=
    'Filtr_R65')
del mdb.models['Filtration'].parts['Flow_R30'].features['Remove faces-3']
del mdb.models['Filtration'].parts['Flow_R30'].features['Remove faces-2']
del mdb.models['Filtration'].parts['Flow_R30'].features['Remove faces-1']
mdb.models['Filtration'].parts.changeKey(fromName='Flow_R60', toName=
    'Filtr_R60')
del mdb.models['Filtration'].parts['Flow_R70']
mdb.models['Filtration'].rootAssembly.deleteFeatures(('Flow-1', 'Flow-2', 
    'Seepage-1', 'Seepage-2', 'Seepage-3', 'Seepage-4', 'Filtr_R65_half-1', 
    'Filtr_R65_full-1', 'Filtr_R65_full-2', 'Filtr_R65_full-3', 
    'Filtr_R65_quarter-1', 'Flow_R65_full-1', 'Cylinder-1', 'Filtr_C40-1', 
    'Filtr_C40_half-1', 'Filtr_C40_half-2', 'Flow_C40-1', 'Flow_C40-2', 
    'Part-1-1', 'Part-1-2', 'Part-1-3', 'Part-2-1', 'Part-2-2', 'Flow_R30-1', 
    'Flow_R30_octa-1'))
del mdb.models['Filtration'].rootAssembly.features['Filtr_R65_octa-1']
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['Sphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.52)
mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['Sphere'].regenerate()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='Filtr_R52', originalInstances=SUPPRESS)
del mdb.models['Filtration'].rootAssembly.features['Filtr_R52-1']
mdb.models['Filtration'].parts['Filtr_R52'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R52'].cells.getSequenceFromMask((
    '[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R52'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R52'].edges[10], MIDDLE), point2=
    mdb.models['Filtration'].parts['Filtr_R52'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R52'].edges[12], MIDDLE), point3=
    mdb.models['Filtration'].parts['Filtr_R52'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R52'].edges[17], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R52'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R52'].cells.getSequenceFromMask((
    '[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R52'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R52'].edges[38], MIDDLE), point2=
    mdb.models['Filtration'].parts['Filtr_R52'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R52'].edges[22], MIDDLE), point3=
    mdb.models['Filtration'].parts['Filtr_R52'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R52'].edges[14], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R52'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R52'].cells.getSequenceFromMask((
    '[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R52'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R52'].edges[21], MIDDLE), point2=
    mdb.models['Filtration'].parts['Filtr_R52'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R52'].edges[12], CENTER), point3=
    mdb.models['Filtration'].parts['Filtr_R52'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R52'].edges[59], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R52'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R52'].cells.getSequenceFromMask((
    '[#3f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R52'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R52'].edges[8], CENTER), point2=
    mdb.models['Filtration'].parts['Filtr_R52'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R52'].edges[2], MIDDLE), point3=
    mdb.models['Filtration'].parts['Filtr_R52'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R52'].edges[6], MIDDLE))
#* Feature creation failed.
mdb.models['Filtration'].parts['Filtr_R52'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R52'].cells.getSequenceFromMask((
    '[#3f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R52'].vertices[36], point2=
    mdb.models['Filtration'].parts['Filtr_R52'].vertices[35], point3=
    mdb.models['Filtration'].parts['Filtr_R52'].vertices[34])
mdb.models['Filtration'].parts['Filtr_R52'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R52'].cells.getSequenceFromMask((
    '[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R52'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R52'].edges[34], MIDDLE), point2=
    mdb.models['Filtration'].parts['Filtr_R52'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R52'].edges[1], MIDDLE), point3=
    mdb.models['Filtration'].parts['Filtr_R52'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R52'].edges[30], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R52'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R52'].cells.getSequenceFromMask((
    '[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R52'].vertices[48], point2=
    mdb.models['Filtration'].parts['Filtr_R52'].vertices[22], point3=
    mdb.models['Filtration'].parts['Filtr_R52'].vertices[36])
mdb.models['Filtration'].parts['Filtr_R52'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R52'].cells.getSequenceFromMask((
    '[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R52'].vertices[47], point2=
    mdb.models['Filtration'].parts['Filtr_R52'].vertices[51], point3=
    mdb.models['Filtration'].parts['Filtr_R52'].vertices[57])
mdb.models['Filtration'].parts['Filtr_R52'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R52'].cells.getSequenceFromMask((
    '[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R52'].vertices[14], point2=
    mdb.models['Filtration'].parts['Filtr_R52'].vertices[50], point3=
    mdb.models['Filtration'].parts['Filtr_R52'].vertices[3])
mdb.models['Filtration'].parts['Filtr_R52'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R52'].cells.getSequenceFromMask((
    '[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R52'].vertices[46], point2=
    mdb.models['Filtration'].parts['Filtr_R52'].vertices[40], point3=
    mdb.models['Filtration'].parts['Filtr_R52'].vertices[72])
mdb.models['Filtration'].Part(name='Filtr_R52_octa', objectToCopy=
    mdb.models['Filtration'].parts['Filtr_R52'])
mdb.models['Filtration'].parts['Filtr_R52_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R52_octa'].faces.getSequenceFromMask(
    mask=('[#c3c07f0f #1ff0f01f #ff803c00 #cb575600 #c98cc6c8 #66 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R52_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R52_octa'].faces.getSequenceFromMask(
    mask=('[#60c007ff #3c3c079e #3e40ba ]', ), ))
mdb.models['Filtration'].parts['Filtr_R52_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R52_octa'].faces.getSequenceFromMask(
    mask=('[#6603ff0c #1558 ]', ), ))
# Save by Dima on Sat Apr 28 10:13:07 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Filtration'].parts['Filtr_R52_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.02)
mdb.models['Filtration'].parts['Filtr_R52_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.04)
mdb.models['Filtration'].parts['Filtr_R52_octa'].generateMesh()
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='Filtr_R52_M1408', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Job-3', nodalOutputPrecision=SINGLE, numCpus=1, numDomains=1, 
    parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', type=ANALYSIS
    , userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs.changeKey(fromName='Job-3', toName='Filtr_R52_M1408')
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R52_octa-1', part=mdb.models['Filtration'].parts['Filtr_R52_octa'])
del mdb.jobs['Filtr_R65_octa_M2280']
del mdb.jobs['Flow_R30_octa_M1025']
del mdb.models['Filtration'].parts['Flow_R30']
del mdb.models['Filtration'].parts['Flow_R30_octa']
mdb.models['Filtration'].parts['Filtr_R60'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R60'].cells.getSequenceFromMask((
    '[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R60'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R60'].edges[19], MIDDLE), point2=
    mdb.models['Filtration'].parts['Filtr_R60'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R60'].edges[20], MIDDLE), point3=
    mdb.models['Filtration'].parts['Filtr_R60'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R60'].edges[13], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R60'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R60'].cells.getSequenceFromMask((
    '[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R60'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R60'].edges[26], MIDDLE), point2=
    mdb.models['Filtration'].parts['Filtr_R60'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R60'].edges[38], MIDDLE), point3=
    mdb.models['Filtration'].parts['Filtr_R60'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R60'].edges[19], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R60'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R60'].cells.getSequenceFromMask((
    '[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R60'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R60'].edges[47], MIDDLE), point2=
    mdb.models['Filtration'].parts['Filtr_R60'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R60'].edges[59], MIDDLE), point3=
    mdb.models['Filtration'].parts['Filtr_R60'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R60'].edges[34], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R60'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R60'].cells.getSequenceFromMask((
    '[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R60'].vertices[28], point2=
    mdb.models['Filtration'].parts['Filtr_R60'].vertices[25], point3=
    mdb.models['Filtration'].parts['Filtr_R60'].vertices[23])
mdb.models['Filtration'].parts['Filtr_R60'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R60'].cells.getSequenceFromMask((
    '[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R60'].vertices[47], point2=
    mdb.models['Filtration'].parts['Filtr_R60'].vertices[49], point3=
    mdb.models['Filtration'].parts['Filtr_R60'].vertices[38])
mdb.models['Filtration'].parts['Filtr_R60'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R60'].cells.getSequenceFromMask((
    '[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R60'].vertices[40], point2=
    mdb.models['Filtration'].parts['Filtr_R60'].vertices[9], point3=
    mdb.models['Filtration'].parts['Filtr_R60'].vertices[32])
mdb.models['Filtration'].parts['Filtr_R60'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R60'].cells.getSequenceFromMask((
    '[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R60'].vertices[41], point2=
    mdb.models['Filtration'].parts['Filtr_R60'].vertices[59], point3=
    mdb.models['Filtration'].parts['Filtr_R60'].vertices[43])
mdb.models['Filtration'].parts['Filtr_R60'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R60'].cells.getSequenceFromMask((
    '[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R60'].vertices[45], point2=
    mdb.models['Filtration'].parts['Filtr_R60'].vertices[6], point3=
    mdb.models['Filtration'].parts['Filtr_R60'].vertices[59])
mdb.models['Filtration'].parts['Filtr_R60'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R60'].cells.getSequenceFromMask((
    '[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R60'].vertices[67], point2=
    mdb.models['Filtration'].parts['Filtr_R60'].vertices[39], point3=
    mdb.models['Filtration'].parts['Filtr_R60'].vertices[65])
mdb.models['Filtration'].parts['Filtr_R60'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R60'].faces.getSequenceFromMask(
    mask=('[#c3c07f0f #1ff0f01f #ff803c00 #6195865 #65373451 #73 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R60'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R60'].faces.getSequenceFromMask(
    mask=('[#830007ff #e2e2f067 #38a0f3 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R60'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R60'].faces.getSequenceFromMask(
    mask=('[#1ffc0073 #b64 ]', ), ))
# Save by Dima on Sat Apr 28 10:35:22 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Filtration'].parts.changeKey(fromName='Filtr_R60', toName=
    'Filtr_R60_octa')
del mdb.models['Filtration'].parts['Filtr_R52']
del mdb.models['Filtration'].parts['Filtr_R65_octa']
mdb.models['Filtration'].parts.changeKey(fromName='Filtr_R65', toName=
    'Filtr_R65_0cta')
mdb.models['Filtration'].parts['Filtr_R65_0cta'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].edges[19], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R65_0cta'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].edges[20], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R65_0cta'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].edges[13], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R65_0cta'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].edges[26], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R65_0cta'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].edges[38], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R65_0cta'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].edges[19], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R65_0cta'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].edges[34], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R65_0cta'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].edges[59], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R65_0cta'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].edges[47], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R65_0cta'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].vertices[27], point2=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].vertices[24], point3=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].vertices[23])
mdb.models['Filtration'].parts['Filtr_R65_0cta'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].vertices[48], point2=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].vertices[41], point3=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].vertices[38])
mdb.models['Filtration'].parts['Filtr_R65_0cta'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].vertices[4], point2=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].vertices[38], point3=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].vertices[8])
mdb.models['Filtration'].parts['Filtr_R65_0cta'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].vertices[61], point2=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].vertices[49], point3=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].vertices[46])
mdb.models['Filtration'].parts['Filtr_R65_0cta'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].vertices[4], point2=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].vertices[42], point3=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].vertices[54])
mdb.models['Filtration'].parts['Filtr_R65_0cta'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].vertices[41], point2=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].vertices[67], point3=
    mdb.models['Filtration'].parts['Filtr_R65_0cta'].vertices[47])
mdb.models['Filtration'].parts.changeKey(fromName='Filtr_R65_0cta', toName=
    'Filtr_R65_octa')
mdb.models['Filtration'].parts['Filtr_R65_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R65_octa'].faces.getSequenceFromMask(
    mask=('[#c3c07f0f #1ff0f01f #ff803c00 #48e923a #65033d75 #72 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R65_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R65_octa'].faces.getSequenceFromMask(
    mask=('[#39873 #e2e2fff8 #3c6233 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R65_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R65_octa'].faces.getSequenceFromMask(
    mask=('[#1fe0c03f #b94 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R60_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.04)
mdb.models['Filtration'].parts['Filtr_R60_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R60_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R60_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.035)
mdb.models['Filtration'].parts['Filtr_R60_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R60_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R60_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.03)
mdb.models['Filtration'].parts['Filtr_R60_octa'].generateMesh()
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R60_octa_M1216', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs.changeKey(fromName='Filtr_R52_M1408', toName='Filtr_R52_octa_M1408')
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R60_octa-1', part=mdb.models['Filtration'].parts['Filtr_R60_octa'])
mdb.models['Filtration'].rootAssembly.features['Filtr_R52_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R60_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R52_octa-1'].resume()
mdb.models['Filtration'].rootAssembly.features['Filtr_R52_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['Sphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.64)
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.62)
mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['Sphere'].regenerate()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='Filtr_R64_octa', originalInstances=SUPPRESS)
mdb.models['Filtration'].parts['Filtr_R64_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].edges[19], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R64_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].edges[20], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R64_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].edges[13], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R64_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].edges[26], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R64_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].edges[38], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R64_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].edges[19], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R64_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].edges[47], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R64_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].edges[59], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R64_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].edges[34], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R64_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[28], point2=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[25], point3=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[23])
mdb.models['Filtration'].parts['Filtr_R64_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[47], point2=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[49], point3=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[38])
mdb.models['Filtration'].parts['Filtr_R64_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[40], point2=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[9], point3=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[32])
mdb.models['Filtration'].parts['Filtr_R64_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[59], point2=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[43], point3=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[41])
mdb.models['Filtration'].parts['Filtr_R64_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[6], point2=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[45], point3=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[59])
mdb.models['Filtration'].parts['Filtr_R64_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[39], point2=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[65], point3=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[45])
mdb.models['Filtration'].parts['Filtr_R64_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].faces.getSequenceFromMask(
    mask=('[#c3c07f0f #1ff0f01f #ff803c00 #6195865 #65373451 #73 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R64_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].faces.getSequenceFromMask(
    mask=('[#830007ff #e2e2f067 #38a0f3 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R64_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].faces.getSequenceFromMask(
    mask=('[#1ffc0073 #b64 ]', ), ))
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.03)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.028)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.025)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.026)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['Sphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts.changeKey(fromName='Filtr_R64_octa', toName=
    'Filtr_R62_octa')
mdb.models['Filtration'].rootAssembly.regenerate()
del mdb.models['Filtration'].rootAssembly.features['Filtr_R64_octa-1']
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R62_octa-1', part=mdb.models['Filtration'].parts['Filtr_R62_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R62_octa_M1224', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['Sphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.64)
del mdb.models['Filtration'].sketches['__edit__']
del mdb.models['Filtration'].parts['Filtr_R65_octa']
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['Sphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.64)
mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['Sphere'].regenerate()
mdb.models['Filtration'].rootAssembly.features['Filtr_R62_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='Filtr_R64_octa', originalInstances=SUPPRESS)
mdb.models['Filtration'].rootAssembly.features['Filtr_R64_octa-1'].suppress()
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['Sphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.66)
mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['Sphere'].regenerate()
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='Filtr_R66_octa', originalInstances=SUPPRESS)
mdb.models['Filtration'].rootAssembly.features['Filtr_R66_octa-1'].suppress()
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['Sphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.68)
mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['Sphere'].regenerate()
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='Filtr_R68_octa', originalInstances=SUPPRESS)
mdb.models['Filtration'].rootAssembly.features['Filtr_R68_octa-1'].suppress()
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['Sphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.7)
mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['Sphere'].regenerate()
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='Filtr_R70_octa', originalInstances=SUPPRESS)
mdb.models['Filtration'].rootAssembly.features['Filtr_R70_octa-1'].suppress()
mdb.models['Filtration'].parts['Filtr_R64_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].edges[19], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R64_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].edges[20], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R64_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].edges[15], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R64_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].edges[19], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R64_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].edges[38], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R64_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].edges[26], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R64_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].edges[46], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R64_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].edges[59], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R64_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].edges[35], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R64_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[28], point2=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[25], point3=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[23])
mdb.models['Filtration'].parts['Filtr_R64_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[46], point2=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[49], point3=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[38])
mdb.models['Filtration'].parts['Filtr_R64_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[40], point2=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[9], point3=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[32])
mdb.models['Filtration'].parts['Filtr_R64_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[59], point2=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[43], point3=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[41])
mdb.models['Filtration'].parts['Filtr_R64_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[45], point2=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[6], point3=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[59])
mdb.models['Filtration'].parts['Filtr_R64_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[45], point2=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[64], point3=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].vertices[39])
mdb.models['Filtration'].parts['Filtr_R64_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].faces.getSequenceFromMask(
    mask=('[#c3c07f0f #1ff0f01f #ff803c00 #6195865 #6d7cc251 #63 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R64_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].faces.getSequenceFromMask(
    mask=('[#830007ff #e2e2f067 #1ca0f3 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R64_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].faces.getSequenceFromMask(
    mask=('[#1ffc0073 #1364 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.025)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.024)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.features['Filtr_R64_octa-1'].resume()
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R64_octa_M1260', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Filtration'].rootAssembly.features['Filtr_R64_octa-1'].suppress()
# Save by Dima on Sat Apr 28 11:06:08 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Filtration'].rootAssembly.deleteFeatures(('Filtr_R52_octa-1', 
    'Filtr_R60_octa-1', 'Filtr_R62_octa-1', 'Filtr_R64_octa-1'))
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['Sphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.54)
mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['Sphere'].regenerate()
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='Filtr_R56_octa', originalInstances=SUPPRESS)
mdb.models['Filtration'].rootAssembly.features['Filtr_R56_octa-1'].suppress()
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['Sphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.56)
mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['Sphere'].regenerate()
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].parts.changeKey(fromName='Filtr_R56_octa', toName=
    'Filtr_R54_octa')
del mdb.models['Filtration'].rootAssembly.features['Filtr_R56_octa-1']
mdb.models['Filtration'].rootAssembly.deleteFeatures(('Filtr_R66_octa-1', 
    'Filtr_R68_octa-1', 'Filtr_R70_octa-1'))
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['Sphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='Filtr_R56_octa', originalInstances=SUPPRESS)
mdb.models['Filtration'].rootAssembly.features['Filtr_R56_octa-1'].suppress()
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['Sphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.58)
mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['Sphere'].regenerate()
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='Filtr_R58_octa', originalInstances=SUPPRESS)
mdb.models['Filtration'].rootAssembly.features['Filtr_R58_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.deleteFeatures(('Filtr_R56_octa-1', 
    'Filtr_R58_octa-1'))
mdb.models['Filtration'].parts['Filtr_R54_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R54_octa'].edges[19], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R54_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R54_octa'].edges[20], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R54_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R54_octa'].edges[13], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R54_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R54_octa'].edges[26], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R54_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R54_octa'].edges[38], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R54_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R54_octa'].edges[19], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R54_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R54_octa'].edges[47], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R54_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R54_octa'].edges[59], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R54_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R54_octa'].edges[34], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R54_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[28], point2=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[25], point3=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[23])
mdb.models['Filtration'].parts['Filtr_R54_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[47], point2=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[49], point3=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[38])
mdb.models['Filtration'].parts['Filtr_R54_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[2], point2=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[39], point3=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[9])
#* Feature creation failed.
mdb.models['Filtration'].parts['Filtr_R54_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[40], point2=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[9], point3=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[32])
mdb.models['Filtration'].parts['Filtr_R54_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[43], point2=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[59], point3=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[41])
mdb.models['Filtration'].parts['Filtr_R54_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[5], point2=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[45], point3=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[59])
mdb.models['Filtration'].parts['Filtr_R54_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[65], point2=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[39], point3=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].vertices[67])
mdb.models['Filtration'].parts['Filtr_R54_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].faces.getSequenceFromMask(
    mask=('[#c3c07f0f #1ff0f01f #ff803c00 #6195865 #65373451 #73 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R54_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].faces.getSequenceFromMask(
    mask=('[#830007ff #e2e2f067 #38a0f3 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R54_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].faces.getSequenceFromMask(
    mask=('[#1ffc0073 #b64 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R54_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.03)
mdb.models['Filtration'].parts['Filtr_R54_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.032)
mdb.models['Filtration'].parts['Filtr_R54_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.034)
mdb.models['Filtration'].parts['Filtr_R54_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.032)
mdb.models['Filtration'].parts['Filtr_R54_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R54_octa-1', part=mdb.models['Filtration'].parts['Filtr_R54_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R54_octa_M1564', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Filtration'].parts['Filtr_R56_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R56_octa'].edges[19], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R56_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R56_octa'].edges[20], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R56_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R56_octa'].edges[15], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R56_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R56_octa'].edges[26], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R56_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R56_octa'].edges[38], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R56_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R56_octa'].edges[19], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R56_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R56_octa'].edges[59], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R56_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R56_octa'].edges[47], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R56_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R56_octa'].edges[34], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R56_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].vertices[37], point2=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].vertices[19], point3=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].vertices[16])
mdb.models['Filtration'].parts['Filtr_R56_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].vertices[42], point2=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].vertices[40], point3=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].vertices[39])
mdb.models['Filtration'].parts['Filtr_R56_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].vertices[8], point2=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].vertices[41], point3=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].vertices[4])
mdb.models['Filtration'].parts['Filtr_R56_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].vertices[58], point2=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].vertices[47], point3=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].vertices[56])
mdb.models['Filtration'].parts['Filtr_R56_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].vertices[52], point2=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].vertices[14], point3=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].vertices[48])
mdb.models['Filtration'].parts['Filtr_R56_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].vertices[70], point2=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].vertices[45], point3=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].vertices[64])
mdb.models['Filtration'].parts['Filtr_R56_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].faces.getSequenceFromMask(
    mask=('[#3c3f80f0 #e00f0fe0 #7fc3ff #48e923a #65033d75 #72 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R56_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].faces.getSequenceFromMask(
    mask=('[#828007ff #e2e2f067 #3c6233 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R56_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].faces.getSequenceFromMask(
    mask=('[#e1fc070c #b95 ]', ), ))
del mdb.models['Filtration'].rootAssembly.features['Filtr_R54_octa-1']
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R56_octa-1', part=mdb.models['Filtration'].parts['Filtr_R56_octa'])
mdb.models['Filtration'].parts['Filtr_R56_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.03)
mdb.models['Filtration'].parts['Filtr_R56_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R56_octa_M1566', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
del mdb.models['Filtration'].rootAssembly.features['Filtr_R56_octa-1']
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].rootAssembly.suppressFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].parts['Filtr_R58_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R58_octa'].edges[19], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R58_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R58_octa'].edges[20], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R58_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R58_octa'].edges[15], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R58_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R58_octa'].edges[26], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R58_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R58_octa'].edges[38], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R58_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R58_octa'].edges[19], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R58_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R58_octa'].edges[47], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R58_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R58_octa'].edges[59], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R58_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R58_octa'].edges[34], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R58_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].vertices[28], point2=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].vertices[25], point3=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].vertices[23])
mdb.models['Filtration'].parts['Filtr_R58_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].vertices[47], point2=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].vertices[49], point3=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].vertices[38])
mdb.models['Filtration'].parts['Filtr_R58_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].vertices[39], point2=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].vertices[10], point3=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].vertices[2])
mdb.models['Filtration'].parts['Filtr_R58_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].vertices[49], point2=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].vertices[60], point3=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].vertices[47])
mdb.models['Filtration'].parts['Filtr_R58_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].vertices[5], point2=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].vertices[42], point3=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].vertices[56])
mdb.models['Filtration'].parts['Filtr_R58_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].vertices[68], point2=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].vertices[46], point3=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].vertices[40])
mdb.models['Filtration'].parts['Filtr_R58_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].faces.getSequenceFromMask(
    mask=('[#3c3f80f0 #e00f0fe0 #7fc3ff #6195865 #65373451 #73 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R58_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].faces.getSequenceFromMask(
    mask=('[#833ff800 #e2e2f067 #38a0f3 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R58_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].faces.getSequenceFromMask(
    mask=('[#1e03f873 #b64 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R58_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.03)
mdb.models['Filtration'].parts['Filtr_R58_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R58_octa-1', part=mdb.models['Filtration'].parts['Filtr_R58_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R58_octa_M1440', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
del mdb.models['Filtration'].rootAssembly.features['Filtr_R58_octa-1']
mdb.models['Filtration'].parts['Filtr_R66_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R66_octa'].edges[19], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R66_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R66_octa'].edges[20], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R66_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R66_octa'].edges[0], CENTER))
del mdb.models['Filtration'].parts['Filtr_R66_octa'].features['Partition cell-1']
mdb.models['Filtration'].parts['Filtr_R66_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R66_octa'].edges[19], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R66_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R66_octa'].edges[20], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R66_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R66_octa'].edges[15], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R66_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R66_octa'].edges[38], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R66_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R66_octa'].edges[26], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R66_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R66_octa'].edges[19], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R66_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R66_octa'].edges[46], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R66_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R66_octa'].edges[59], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R66_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R66_octa'].edges[35], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R66_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].vertices[35], point2=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].vertices[42], point3=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].vertices[16])
mdb.models['Filtration'].parts['Filtr_R66_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].vertices[40], point2=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].vertices[41], point3=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].vertices[42])
mdb.models['Filtration'].parts['Filtr_R66_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].vertices[32], point2=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].vertices[8], point3=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].vertices[40])
mdb.models['Filtration'].parts['Filtr_R66_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].vertices[59], point2=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].vertices[49], point3=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].vertices[61])
mdb.models['Filtration'].parts['Filtr_R66_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].vertices[45], point2=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].vertices[13], point3=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].vertices[49])
mdb.models['Filtration'].parts['Filtr_R66_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].vertices[41], point2=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].vertices[70], point3=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].vertices[44])
mdb.models['Filtration'].parts['Filtr_R66_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].faces.getSequenceFromMask(
    mask=('[#c3c07f0f #1ff0f01f #ff803c00 #6194cc5 #6d7cc251 #63 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R66_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].faces.getSequenceFromMask(
    mask=('[#833ff800 #e2e2f057 #1ca0f3 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R66_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].faces.getSequenceFromMask(
    mask=('[#e003ff0c #1365 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R66_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.02)
mdb.models['Filtration'].parts['Filtr_R66_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R66_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R66_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.022)
mdb.models['Filtration'].parts['Filtr_R66_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R66_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R66_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.021)
mdb.models['Filtration'].parts['Filtr_R66_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R66_octa-1', part=mdb.models['Filtration'].parts['Filtr_R66_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='filtr_R66_octa_M1144', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
del mdb.models['Filtration'].rootAssembly.features['Filtr_R66_octa-1']
mdb.models['Filtration'].parts['Filtr_R68_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R68_octa'].edges[19], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R68_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R68_octa'].edges[20], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R68_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R68_octa'].edges[15], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R68_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R68_octa'].edges[38], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R68_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R68_octa'].edges[26], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R68_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R68_octa'].edges[19], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R68_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R68_octa'].edges[46], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R68_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R68_octa'].edges[59], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R68_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R68_octa'].edges[35], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R68_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].vertices[28], point2=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].vertices[25], point3=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].vertices[23])
mdb.models['Filtration'].parts['Filtr_R68_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].vertices[46], point2=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].vertices[49], point3=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].vertices[38])
mdb.models['Filtration'].parts['Filtr_R68_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].vertices[5], point2=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].vertices[40], point3=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].vertices[9])
mdb.models['Filtration'].parts['Filtr_R68_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].vertices[41], point2=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].vertices[59], point3=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].vertices[43])
mdb.models['Filtration'].parts['Filtr_R68_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].vertices[59], point2=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].vertices[6], point3=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].vertices[45])
mdb.models['Filtration'].parts['Filtr_R68_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].vertices[39], point2=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].vertices[64], point3=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].vertices[45])
mdb.models['Filtration'].parts['Filtr_R68_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].faces.getSequenceFromMask(
    mask=('[#c3c07f0f #1ff0f01f #ff803c00 #6195865 #6d7cc251 #63 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R68_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].faces.getSequenceFromMask(
    mask=('[#830007ff #e2e2f067 #1ca0f3 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R68_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].faces.getSequenceFromMask(
    mask=('[#1ffc0073 #1364 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R68_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.015)
mdb.models['Filtration'].parts['Filtr_R68_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R68_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R68_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.018)
mdb.models['Filtration'].parts['Filtr_R68_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R68_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R68_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.02)
mdb.models['Filtration'].parts['Filtr_R68_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R68_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R68_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.019)
mdb.models['Filtration'].parts['Filtr_R68_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R68_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R68_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.018)
mdb.models['Filtration'].parts['Filtr_R68_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R68_octa-1', part=mdb.models['Filtration'].parts['Filtr_R68_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R68_octa_M1618', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs.changeKey(fromName='filtr_R66_octa_M1144', toName=
    'Filtr_R66_octa_M1144')
del mdb.models['Filtration'].rootAssembly.features['Filtr_R68_octa-1']
mdb.models['Filtration'].parts['Filtr_R70_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R70_octa'].edges[19], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R70_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R70_octa'].edges[20], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R70_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R70_octa'].edges[15], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R70_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R70_octa'].edges[38], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R70_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R70_octa'].edges[19], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R70_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R70_octa'].edges[26], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R70_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R70_octa'].edges[47], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R70_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R70_octa'].edges[59], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R70_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R70_octa'].edges[34], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R70_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].vertices[28], point2=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].vertices[25], point3=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].vertices[23])
mdb.models['Filtration'].parts['Filtr_R70_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].vertices[47], point2=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].vertices[49], point3=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].vertices[38])
mdb.models['Filtration'].parts['Filtr_R70_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].vertices[40], point2=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].vertices[9], point3=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].vertices[32])
mdb.models['Filtration'].parts['Filtr_R70_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].vertices[41], point2=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].vertices[59], point3=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].vertices[43])
mdb.models['Filtration'].parts['Filtr_R70_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].vertices[45], point2=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].vertices[6], point3=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].vertices[59])
mdb.models['Filtration'].parts['Filtr_R70_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].vertices[45], point2=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].vertices[65], point3=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].vertices[39])
mdb.models['Filtration'].parts['Filtr_R70_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].faces.getSequenceFromMask(
    mask=('[#c3c07f0f #1ff0f01f #ff803c00 #6195865 #65373451 #73 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R70_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].faces.getSequenceFromMask(
    mask=('[#830007ff #e2e2f067 #38a0f3 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R70_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].faces.getSequenceFromMask(
    mask=('[#1ffc0073 #b64 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R70_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.01)
mdb.models['Filtration'].parts['Filtr_R70_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R70_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R70_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.012)
mdb.models['Filtration'].parts['Filtr_R70_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R70_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R70_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.014)
mdb.models['Filtration'].parts['Filtr_R70_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R70_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R70_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.015)
mdb.models['Filtration'].parts['Filtr_R70_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R70_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R70_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.014)
mdb.models['Filtration'].parts['Filtr_R70_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R70_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R70_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.015)
mdb.models['Filtration'].parts['Filtr_R70_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R70_octa-1', part=mdb.models['Filtration'].parts['Filtr_R70_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R70_octa_M1296', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
# Save by Dima on Sat Apr 28 12:34:52 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Filtration'].rootAssembly.features['Filtr_R70_octa-1']
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['Sphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.48)
mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['Sphere'].regenerate()
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='Filtr_R48_octa', originalInstances=SUPPRESS)
mdb.models['Filtration'].rootAssembly.features['Filtr_R48_octa-1'].suppress()
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['Sphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.44)
mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['Sphere'].regenerate()
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='Filtr_R44_octa', originalInstances=SUPPRESS)
mdb.models['Filtration'].rootAssembly.features['Filtr_R44_octa-1'].suppress()
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['Sphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.46)
mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['Sphere'].regenerate()
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='Filtr_R46_octa', originalInstances=SUPPRESS)
mdb.models['Filtration'].rootAssembly.features['Filtr_R46_octa-1'].suppress()
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['Sphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.42)
mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['Sphere'].regenerate()
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='Filtr_R42_octa', originalInstances=SUPPRESS)
mdb.models['Filtration'].rootAssembly.features['Filtr_R42_octa-1'].suppress()
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['Sphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.4)
mdb.models['Filtration'].parts['Sphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['Sphere'].regenerate()
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='Filtr_R40_octa', originalInstances=SUPPRESS)
mdb.models['Filtration'].rootAssembly.features['Filtr_R40_octa-1'].suppress()
mdb.models['Filtration'].parts['Filtr_R48_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R48_octa'].edges[10], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R48_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R48_octa'].edges[11], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R48_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R48_octa'].edges[4], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R48_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R48_octa'].edges[20], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R48_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R48_octa'].edges[16], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R48_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R48_octa'].edges[18], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R48_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R48_octa'].edges[34], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R48_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R48_octa'].edges[20], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R48_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R48_octa'].edges[31], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R48_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].vertices[25], point2=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].vertices[15], point3=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].vertices[13])
mdb.models['Filtration'].parts['Filtr_R48_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].vertices[33], point2=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].vertices[29], point3=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].vertices[27])
mdb.models['Filtration'].parts['Filtr_R48_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].vertices[10], point2=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].vertices[28], point3=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].vertices[6])
mdb.models['Filtration'].parts['Filtr_R48_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].vertices[35], point2=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].vertices[39], point3=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].vertices[33])
mdb.models['Filtration'].parts['Filtr_R48_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].vertices[30], point2=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].vertices[5], point3=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].vertices[37])
mdb.models['Filtration'].parts['Filtr_R48_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].vertices[29], point2=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].vertices[44], point3=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].vertices[33])
mdb.models['Filtration'].parts['Filtr_R48_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].faces.getSequenceFromMask(
    mask=('[#c9fca8e1 #caf1e067 #4ccd68c1 #3cd32a #34c11b9a #77 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R48_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].faces.getSequenceFromMask(
    mask=('[#3cc007ff #a91d0798 #599133 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R48_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].faces.getSequenceFromMask(
    mask=('[#1ffc068c #63c ]', ), ))
mdb.models['Filtration'].parts['Filtr_R48_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.03)
mdb.models['Filtration'].parts['Filtr_R48_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R48_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R48_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.04)
mdb.models['Filtration'].parts['Filtr_R48_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.features['Filtr_R48_octa-1'].resume()
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R48_octa_M1818', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
del mdb.models['Filtration'].rootAssembly.features['Filtr_R48_octa-1']
mdb.models['Filtration'].parts['Filtr_R46_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R46_octa'].edges[10], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R46_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R46_octa'].edges[11], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R46_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R46_octa'].edges[4], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R46_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R46_octa'].edges[18], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R46_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R46_octa'].edges[16], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R46_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R46_octa'].edges[20], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R46_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R46_octa'].edges[14], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R46_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R46_octa'].edges[34], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R46_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R46_octa'].edges[17], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R46_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].vertices[28], point2=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].vertices[14], point3=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].vertices[31])
mdb.models['Filtration'].parts['Filtr_R46_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].vertices[32], point2=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].vertices[30], point3=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].vertices[33])
mdb.models['Filtration'].parts['Filtr_R46_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].vertices[1], point2=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].vertices[26], point3=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].vertices[11])
mdb.models['Filtration'].parts['Filtr_R46_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].vertices[32], point2=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].vertices[38], point3=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].vertices[34])
mdb.models['Filtration'].parts['Filtr_R46_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].vertices[3], point2=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].vertices[34], point3=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].vertices[8])
mdb.models['Filtration'].parts['Filtr_R46_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].vertices[42], point2=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].vertices[35], point3=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].vertices[46])
mdb.models['Filtration'].parts['Filtr_R46_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].faces.getSequenceFromMask(
    mask=('[#38419f27 #ca0d8f2a #f8d4387e #f030a9a #1e2e6332 #b3 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R46_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].faces.getSequenceFromMask(
    mask=('[#827ff800 #6ae2079f #e94a86 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R46_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].faces.getSequenceFromMask(
    mask=('[#1ffc068c #143a ]', ), ))
mdb.models['Filtration'].parts['Filtr_R46_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.04)
mdb.models['Filtration'].parts['Filtr_R46_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.features['Filtr_R46_octa-1'].resume()
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R46_octa_M1800', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
del mdb.models['Filtration'].rootAssembly.features['Filtr_R46_octa-1']
mdb.models['Filtration'].parts['Filtr_R44_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R44_octa'].edges[10], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R44_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R44_octa'].edges[11], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R44_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R44_octa'].edges[4], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R44_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R44_octa'].edges[20], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R44_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R44_octa'].edges[16], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R44_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R44_octa'].edges[18], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R44_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R44_octa'].edges[34], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R44_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R44_octa'].edges[20], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R44_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R44_octa'].edges[31], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R44_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].vertices[13], point2=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].vertices[15], point3=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].vertices[25])
mdb.models['Filtration'].parts['Filtr_R44_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].vertices[33], point2=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].vertices[28], point3=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].vertices[27])
mdb.models['Filtration'].parts['Filtr_R44_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].vertices[10], point2=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].vertices[28], point3=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].vertices[6])
mdb.models['Filtration'].parts['Filtr_R44_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].vertices[35], point2=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].vertices[40], point3=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].vertices[31])
mdb.models['Filtration'].parts['Filtr_R44_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].vertices[8], point2=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].vertices[34], point3=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].vertices[3])
mdb.models['Filtration'].parts['Filtr_R44_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].vertices[44], point2=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].vertices[30], point3=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].vertices[47])
mdb.models['Filtration'].parts['Filtr_R44_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].faces.getSequenceFromMask(
    mask=('[#68c19f27 #35f27599 #4ccd68c1 #6cd32a #34c11b9a #77 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R44_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].faces.getSequenceFromMask(
    mask=('[#3cfff800 #a91d0798 #599133 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R44_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].faces.getSequenceFromMask(
    mask=('[#1ffc068c #63c ]', ), ))
mdb.models['Filtration'].parts['Filtr_R44_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.03)
mdb.models['Filtration'].parts['Filtr_R44_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R44_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R44_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.035)
mdb.models['Filtration'].parts['Filtr_R44_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R44_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R44_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.04)
mdb.models['Filtration'].parts['Filtr_R44_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R44_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R44_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.042)
mdb.models['Filtration'].parts['Filtr_R44_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.features['Filtr_R44_octa-1'].resume()
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R44_octa_M1458', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
del mdb.models['Filtration'].rootAssembly.features['Filtr_R44_octa-1']
mdb.models['Filtration'].parts['Filtr_R42_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R42_octa'].edges[10], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R42_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R42_octa'].edges[11], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R42_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R42_octa'].edges[4], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R42_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R42_octa'].edges[20], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R42_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R42_octa'].edges[16], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R42_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R42_octa'].edges[18], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R42_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R42_octa'].edges[34], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R42_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R42_octa'].edges[20], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R42_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R42_octa'].edges[31], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R42_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].vertices[25], point2=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].vertices[15], point3=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].vertices[13])
mdb.models['Filtration'].parts['Filtr_R42_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].vertices[33], point2=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].vertices[29], point3=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].vertices[27])
mdb.models['Filtration'].parts['Filtr_R42_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].vertices[10], point2=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].vertices[28], point3=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].vertices[6])
mdb.models['Filtration'].parts['Filtr_R42_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].vertices[35], point2=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].vertices[39], point3=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].vertices[33])
mdb.models['Filtration'].parts['Filtr_R42_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].vertices[2], point2=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].vertices[9], point3=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].vertices[34])
mdb.models['Filtration'].parts['Filtr_R42_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].vertices[44], point2=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].vertices[32], point3=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].vertices[47])
mdb.models['Filtration'].parts['Filtr_R42_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].faces.getSequenceFromMask(
    mask=('[#68c19f27 #caf1e599 #4ccd68c1 #3cd32a #34c11b9a #77 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R42_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].faces.getSequenceFromMask(
    mask=('[#3cfff800 #a91d0798 #599133 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R42_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].faces.getSequenceFromMask(
    mask=('[#1ffc068c #63c ]', ), ))
mdb.models['Filtration'].parts['Filtr_R42_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.045)
mdb.models['Filtration'].parts['Filtr_R42_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.features['Filtr_R42_octa-1'].resume()
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R42_octa_M1632', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Filtration'].parts['Filtr_R40_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R40_octa'].edges[4], MIDDLE), point2=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R40_octa'].edges[10], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R40_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R40_octa'].edges[11], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R40_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R40_octa'].edges[18], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R40_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R40_octa'].edges[16], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R40_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R40_octa'].edges[20], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R40_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R40_octa'].edges[14], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R40_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R40_octa'].edges[34], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R40_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R40_octa'].edges[17], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R40_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].vertices[31], point2=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].vertices[14], point3=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].vertices[28])
mdb.models['Filtration'].parts['Filtr_R40_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].vertices[33], point2=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].vertices[31], point3=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].vertices[32])
mdb.models['Filtration'].parts['Filtr_R40_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].vertices[6], point2=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].vertices[29], point3=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].vertices[10])
mdb.models['Filtration'].parts['Filtr_R40_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].vertices[32], point2=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].vertices[37], point3=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].vertices[34])
mdb.models['Filtration'].parts['Filtr_R40_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].vertices[39], point2=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].vertices[4], point3=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].vertices[32])
mdb.models['Filtration'].parts['Filtr_R40_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].vertices[34], point2=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].vertices[48], point3=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].vertices[31])
mdb.models['Filtration'].parts['Filtr_R40_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].faces.getSequenceFromMask(
    mask=('[#c9fca8e1 #ca0d8067 #f8d4387e #f03132a #1e2e6332 #b3 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R40_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].faces.getSequenceFromMask(
    mask=('[#3dbff800 #56e2f060 #e94a86 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R40_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].faces.getSequenceFromMask(
    mask=('[#1e03ff0c #143a ]', ), ))
mdb.models['Filtration'].parts['Filtr_R40_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05)
mdb.models['Filtration'].parts['Filtr_R40_octa'].generateMesh()
del mdb.models['Filtration'].rootAssembly.features['Filtr_R42_octa-1']
mdb.models['Filtration'].rootAssembly.features['Filtr_R40_octa-1'].resume()
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R40_octa_M1248', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
del mdb.models['Filtration'].rootAssembly.features['Filtr_R40_octa-1']
# Save by Dima on Sat Apr 28 13:30:23 2012
# Save by Dima on Sat Apr 28 13:31:13 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Seepage'].parts['Flow_R30_octa'].deleteMesh()
mdb.models['Seepage'].parts['Flow_R30_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.1)
mdb.models['Seepage'].parts['Flow_R30_octa'].generateMesh()
mdb.models['Seepage'].parts['Flow_R30_octa'].deleteMesh()
mdb.models['Seepage'].parts['Flow_R30_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.2)
mdb.models['Seepage'].parts['Flow_R30_octa'].generateMesh()
mdb.models['Seepage'].rootAssembly.features['Filtr_R65_octa-1'].suppress()
mdb.models['Seepage'].rootAssembly.features['Flow_R30_octa-1'].resume()
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Seepage', modelPrint=OFF, multiprocessingMode=DEFAULT, 
    name='Flow_R30_octa_M44', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
# Save by Dima on Sat Apr 28 14:30:37 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Filtration'].parts.changeKey(fromName='Box', toName='zBox')
mdb.models['Filtration'].parts.changeKey(fromName='Sphere', toName='zSphere')
mdb.models['Filtration'].parts['Filtr_R40_octa'].deleteMesh(regions=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ))
mdb.models['Filtration'].parts['Filtr_R40_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R40_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R40_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R40_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R40_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R40_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R40_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.06)
mdb.models['Filtration'].parts['Filtr_R40_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R40_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R40_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.08)
mdb.models['Filtration'].parts['Filtr_R40_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R40_octa-1', part=mdb.models['Filtration'].parts['Filtr_R40_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R40_octaM1609t', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs.changeKey(fromName='Filtr_R40_octaM1609t', toName=
    'Filtr_R40_octa_M1609t')
mdb.models['Filtration'].parts['Filtr_R40_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R40_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.models['Filtration'].parts['Filtr_R42_octa'].deleteMesh(regions=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ))
mdb.models['Filtration'].parts['Filtr_R42_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R42_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R42_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R42_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R42_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R42_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R42_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R42_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R42_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.09)
mdb.models['Filtration'].parts['Filtr_R42_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.features['Filtr_R40_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R42_octa-1', part=mdb.models['Filtration'].parts['Filtr_R42_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R42_octa_M1204', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Filtration'].parts['Filtr_R44_octa'].deleteMesh(regions=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ))
mdb.models['Filtration'].parts['Filtr_R44_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R44_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R44_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R44_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R44_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R44_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R44_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.08)
mdb.models['Filtration'].parts['Filtr_R44_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.features['Filtr_R42_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R44_octa-1', part=mdb.models['Filtration'].parts['Filtr_R44_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R44_octa_M1260t', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs.changeKey(fromName='Filtr_R42_octa_M1204', toName=
    'Filtr_R42_octa_M1204t')
mdb.models['Filtration'].parts['Filtr_R46_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R46_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.07)
mdb.models['Filtration'].parts['Filtr_R46_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R46_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R46_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R46_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R46_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R46_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R46_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R46_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R46_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.075)
mdb.models['Filtration'].parts['Filtr_R46_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.features['Filtr_R44_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R46_octa-1', part=mdb.models['Filtration'].parts['Filtr_R46_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R46_octa_M1662t', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Filtration'].parts['Filtr_R48_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R48_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.075)
mdb.models['Filtration'].parts['Filtr_R48_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R48_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R48_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R48_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R48_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R48_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R48_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.features['Filtr_R46_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R48_octa-1', part=mdb.models['Filtration'].parts['Filtr_R48_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R48_octa_M1515t', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Filtration'].parts['Filtr_R52_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.06)
mdb.models['Filtration'].parts['Filtr_R52_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R52_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R52_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R52_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R52_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R52_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R52_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.features['Filtr_R48_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R52_octa-1', part=mdb.models['Filtration'].parts['Filtr_R52_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R53_octa_M1601t', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Filtration'].rootAssembly.features['Filtr_R52_octa-1'].suppress()
mdb.models['Filtration'].parts['Filtr_R54_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.06)
mdb.models['Filtration'].parts['Filtr_R54_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R54_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R54_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R54_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R54_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R54_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R54_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05)
mdb.models['Filtration'].parts['Filtr_R54_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.055)
mdb.models['Filtration'].parts['Filtr_R54_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.058)
mdb.models['Filtration'].parts['Filtr_R54_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.059)
mdb.models['Filtration'].parts['Filtr_R54_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.06)
mdb.models['Filtration'].parts['Filtr_R54_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.059)
mdb.models['Filtration'].parts['Filtr_R54_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R54_octa-1', part=mdb.models['Filtration'].parts['Filtr_R54_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R54_octa_M1848t', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
# Save by Dima on Sat Apr 28 16:59:50 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Filtration'].parts['Filtr_R56_octa'].deleteMesh(regions=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ))
mdb.models['Filtration'].parts['Filtr_R56_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R56_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R56_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R56_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R56_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R56_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R56_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R56_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R56_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.07)
mdb.models['Filtration'].parts['Filtr_R56_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R56_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R56_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.06)
mdb.models['Filtration'].parts['Filtr_R56_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.features['Filtr_R54_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R56_octa-1', part=mdb.models['Filtration'].parts['Filtr_R56_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R56_octa_M1634t', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Filtration'].rootAssembly.features['Filtr_R56_octa-1'].suppress()
mdb.models['Filtration'].parts['Filtr_R58_octa'].deleteMesh(regions=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ))
mdb.models['Filtration'].parts['Filtr_R58_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R58_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R58_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R58_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R58_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R58_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R58_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.06)
mdb.models['Filtration'].parts['Filtr_R58_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R58_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R58_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.058)
mdb.models['Filtration'].parts['Filtr_R58_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R58_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R58_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.06)
mdb.models['Filtration'].parts['Filtr_R58_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R58_octa-1', part=mdb.models['Filtration'].parts['Filtr_R58_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R58__octa_M1196t', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Filtration'].parts['Filtr_R60_octa'].deleteMesh(regions=
    mdb.models['Filtration'].parts['Filtr_R60_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ))
mdb.models['Filtration'].parts['Filtr_R60_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R60_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R60_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R60_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R60_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R60_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R60_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05)
mdb.models['Filtration'].parts['Filtr_R60_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.features['Filtr_R58_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R60_octa-1', part=mdb.models['Filtration'].parts['Filtr_R60_octa'])
del mdb.jobs['Flow_R30_octa_M44']
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R60_octa_M1618t', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Filtration'].rootAssembly.features['Filtr_R60_octa-1'].suppress()
mdb.models['Filtration'].parts['Filtr_R62_octa'].deleteMesh(regions=
    mdb.models['Filtration'].parts['Filtr_R62_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ))
mdb.models['Filtration'].parts['Filtr_R62_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R62_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R62_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R62_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R62_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R62_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R62_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.04)
mdb.models['Filtration'].parts['Filtr_R62_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R62_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R62_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.045)
mdb.models['Filtration'].parts['Filtr_R62_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R62_octa-1', part=mdb.models['Filtration'].parts['Filtr_R62_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R62_octa_M1509t', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Filtration'].rootAssembly.features['Filtr_R62_octa-1'].suppress()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh(regions=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ))
mdb.models['Filtration'].parts['Filtr_R64_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R64_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R64_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R64_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.04)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.042)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R64_octa-1', part=mdb.models['Filtration'].parts['Filtr_R64_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R64_octa_M1643t', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Filtration'].rootAssembly.features['Filtr_R64_octa-1'].suppress()
mdb.models['Filtration'].parts['Filtr_R66_octa'].deleteMesh(regions=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ))
mdb.models['Filtration'].parts['Filtr_R66_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R66_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R66_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R66_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R66_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R66_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R66_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.04)
mdb.models['Filtration'].parts['Filtr_R66_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R66_octa-1', part=mdb.models['Filtration'].parts['Filtr_R66_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R66_octa_M1673t', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Filtration'].rootAssembly.features['Filtr_R66_octa-1'].suppress()
mdb.models['Filtration'].parts['Filtr_R68_octa'].deleteMesh(regions=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ))
mdb.models['Filtration'].parts['Filtr_R68_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R68_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R68_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R68_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R68_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R68_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R68_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.035)
mdb.models['Filtration'].parts['Filtr_R68_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R68_octa-1', part=mdb.models['Filtration'].parts['Filtr_R68_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R68_octa_M1540t', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Filtration'].rootAssembly.features['Filtr_R68_octa-1'].suppress()
mdb.models['Filtration'].parts['Filtr_R70_octa'].deleteMesh(regions=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ))
mdb.models['Filtration'].parts['Filtr_R70_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R70_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R70_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R70_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R70_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R70_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R70_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.03)
mdb.models['Filtration'].parts['Filtr_R70_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R70_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R70_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.032)
mdb.models['Filtration'].parts['Filtr_R70_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R70_octa-1', part=mdb.models['Filtration'].parts['Filtr_R70_octa'])
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R70_octa_M1443t', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
# Save by Dima on Sun Apr 29 08:37:40 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['zSphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['zSphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['zSphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.38)
mdb.models['Filtration'].parts['zSphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['zSphere'].regenerate()
mdb.models['Filtration'].rootAssembly.features['Filtr_R70_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='Fltr_R38_octa', originalInstances=SUPPRESS)
mdb.models['Filtration'].parts.changeKey(fromName='Fltr_R38_octa', toName=
    'Filtr_R38_octa')
mdb.models['Filtration'].parts['Filtr_R38_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R38_octa'].edges[8], MIDDLE), point2=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R38_octa'].edges[3], MIDDLE), point3=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R38_octa'].edges[1], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R38_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R38_octa'].edges[21], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R38_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R38_octa'].edges[13], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R38_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R38_octa'].edges[10], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R38_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R38_octa'].edges[37], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R38_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R38_octa'].edges[11], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R38_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R38_octa'].edges[35], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R38_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].vertices[15], point2=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].vertices[13], point3=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].vertices[25])
mdb.models['Filtration'].parts['Filtr_R38_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].vertices[33], point2=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].vertices[27], point3=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].vertices[28])
mdb.models['Filtration'].parts['Filtr_R38_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].vertices[10], point2=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].vertices[28], point3=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].vertices[6])
mdb.models['Filtration'].parts['Filtr_R38_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].vertices[35], point2=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].vertices[31], point3=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].vertices[40])
mdb.models['Filtration'].parts['Filtr_R38_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].vertices[9], point2=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].vertices[35], point3=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].vertices[2])
mdb.models['Filtration'].parts['Filtr_R38_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].vertices[44], point2=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].vertices[31], point3=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].vertices[47])
mdb.models['Filtration'].parts['Filtr_R38_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].faces.getSequenceFromMask(
    ('[#38419f27 #b3f27f52 #4ccd68c0 #6cd32a #262d1b95 #75 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R38_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].faces.getSequenceFromMask(
    ('[#3cfff800 #a91d0798 #e64133 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R38_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].faces.getSequenceFromMask(
    ('[#1ffc068c #283c ]', ), ))
mdb.models['Filtration'].parts['Filtr_R38_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R38_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R38_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R38_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R38_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R38_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R38_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.1)
mdb.models['Filtration'].parts['Filtr_R38_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R38_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R38_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.09)
mdb.models['Filtration'].parts['Filtr_R38_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R38_octa_M1403t', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Filtration'].rootAssembly.features['Fltr_R38_octa-1'].suppress()
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['zSphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['zSphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['zSphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.36)
mdb.models['Filtration'].parts['zSphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['zSphere'].regenerate()
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='Filtr_R36_octa', originalInstances=SUPPRESS)
mdb.models['Filtration'].parts['Filtr_R36_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R36_octa'].edges[8], MIDDLE), point2=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R36_octa'].edges[1], MIDDLE), point3=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R36_octa'].edges[3], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R36_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R36_octa'].edges[13], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R36_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R36_octa'].edges[21], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R36_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R36_octa'].edges[7], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R36_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R36_octa'].edges[17], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R36_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R36_octa'].edges[35], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R36_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R36_octa'].edges[11], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R36_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].vertices[30], point2=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].vertices[14], point3=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].vertices[31])
mdb.models['Filtration'].parts['Filtr_R36_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].vertices[33], point2=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].vertices[31], point3=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].vertices[32])
mdb.models['Filtration'].parts['Filtr_R36_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].vertices[1], point2=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].vertices[26], point3=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].vertices[11])
mdb.models['Filtration'].parts['Filtr_R36_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].vertices[32], point2=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].vertices[34], point3=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].vertices[38])
mdb.models['Filtration'].parts['Filtr_R36_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].vertices[8], point2=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].vertices[36], point3=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].vertices[3])
mdb.models['Filtration'].parts['Filtr_R36_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].vertices[45], point2=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].vertices[35], point3=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].vertices[44])
mdb.models['Filtration'].parts['Filtr_R36_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].faces.getSequenceFromMask(
    ('[#387d48e1 #990e1f52 #fb28363e #9030a0a #9a136332 #90 ]', ), ))
del mdb.models['Filtration'].parts['Filtr_R36_octa'].features['Remove faces-1']
mdb.models['Filtration'].parts['Filtr_R36_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].faces.getSequenceFromMask(
    ('[#387d48e1 #990e1f52 #fb28363e #f030a9a #dad36332 #b0 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R36_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].faces.getSequenceFromMask(
    ('[#433ff800 #56e207b7 #f0aa86 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R36_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].faces.getSequenceFromMask(
    ('[#1ffc0073 #303a ]', ), ))
mdb.models['Filtration'].parts['Filtr_R36_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R36_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R36_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R36_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R36_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R36_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R36_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.09)
mdb.models['Filtration'].parts['Filtr_R36_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R36_octa_M1502t', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Filtration'].rootAssembly.features['Filtr_R36_octa-1'].suppress()
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['zSphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['zSphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['zSphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.34)
mdb.models['Filtration'].parts['zSphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['zSphere'].regenerate()
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='Filtr_R34_octa', originalInstances=SUPPRESS)
mdb.models['Filtration'].parts['Filtr_R34_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R34_octa'].edges[8], MIDDLE), point2=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R34_octa'].edges[3], MIDDLE), point3=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R34_octa'].edges[1], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R34_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R34_octa'].edges[10], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R34_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R34_octa'].edges[21], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R34_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R34_octa'].edges[13], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R34_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R34_octa'].edges[37], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R34_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R34_octa'].edges[11], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R34_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R34_octa'].edges[35], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R34_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].vertices[15], point2=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].vertices[13], point3=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].vertices[25])
mdb.models['Filtration'].parts['Filtr_R34_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].vertices[28], point2=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].vertices[27], point3=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].vertices[33])
mdb.models['Filtration'].parts['Filtr_R34_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].vertices[1], point2=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].vertices[28], point3=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].vertices[11])
mdb.models['Filtration'].parts['Filtr_R34_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].vertices[34], point2=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].vertices[40], point3=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].vertices[35])
mdb.models['Filtration'].parts['Filtr_R34_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].vertices[2], point2=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].vertices[41], point3=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].vertices[9])
mdb.models['Filtration'].parts['Filtr_R34_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].vertices[46], point2=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].vertices[32], point3=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].vertices[43])
mdb.models['Filtration'].parts['Filtr_R34_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].faces.getSequenceFromMask(
    ('[#c7be60d8 #caf1e0ad #4ccd68c1 #6cca9a #262d1b95 #75 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R34_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].faces.getSequenceFromMask(
    ('[#386076 #a91dfff8 #e64133 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R34_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].faces.getSequenceFromMask(
    ('[#1e0f3fc0 #283c ]', ), ))
mdb.models['Filtration'].parts['Filtr_R34_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R34_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R34_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R34_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R34_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R34_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R34_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.09)
mdb.models['Filtration'].parts['Filtr_R34_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
# Save by Dima on Sun Apr 29 09:44:43 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R34_octa-M1490T', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Filtration'].rootAssembly.features['Filtr_R34_octa-1'].suppress()
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['zSphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['zSphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['zSphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.32)
mdb.models['Filtration'].parts['zSphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['zSphere'].regenerate()
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='fILTR_r32_OCTA', originalInstances=SUPPRESS)
mdb.models['Filtration'].parts.changeKey(fromName='fILTR_r32_OCTA', toName=
    'Filtr_R32_octa')
mdb.models['Filtration'].rootAssembly.regenerate()
del mdb.models['Filtration'].rootAssembly.features['fILTR_r32_OCTA-1']
mdb.models['Filtration'].rootAssembly.Instance(dependent=ON, name=
    'Filtr_R32_octa-1', part=mdb.models['Filtration'].parts['Filtr_R32_octa'])
mdb.models['Filtration'].parts['Filtr_R32_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R32_octa'].edges[8], MIDDLE), point2=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R32_octa'].edges[3], MIDDLE), point3=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R32_octa'].edges[1], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R32_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R32_octa'].edges[10], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R32_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R32_octa'].edges[21], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R32_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R32_octa'].edges[13], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R32_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R32_octa'].edges[37], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R32_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R32_octa'].edges[11], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R32_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R32_octa'].edges[35], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R32_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].vertices[25], point2=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].vertices[13], point3=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].vertices[15])
mdb.models['Filtration'].parts['Filtr_R32_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].vertices[29], point2=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].vertices[28], point3=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].vertices[33])
mdb.models['Filtration'].parts['Filtr_R32_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].vertices[1], point2=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].vertices[28], point3=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].vertices[11])
mdb.models['Filtration'].parts['Filtr_R32_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].vertices[34], point2=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].vertices[39], point3=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].vertices[35])
mdb.models['Filtration'].parts['Filtr_R32_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].vertices[42], point2=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].vertices[4], point3=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].vertices[36])
mdb.models['Filtration'].parts['Filtr_R32_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].vertices[32], point2=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].vertices[48], point3=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].vertices[31])
mdb.models['Filtration'].parts['Filtr_R32_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].faces.getSequenceFromMask(
    mask=('[#3603571e #35f27f98 #4ccd68c1 #ccca9a #262d1b95 #75 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R32_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].faces.getSequenceFromMask(
    mask=('[#3b70c #a91dfff8 #e64133 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R32_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].faces.getSequenceFromMask(
    mask=('[#1e0f303f #283c ]', ), ))
mdb.models['Filtration'].parts['Filtr_R32_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R32_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R32_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R32_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R32_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R32_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R32_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.09)
mdb.models['Filtration'].parts['Filtr_R32_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr__R32_octa_M1546t', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs.changeKey(fromName='Filtr__R32_octa_M1546t', toName=
    'Filtr_R32_octa_M1546t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R32_octa-1'].suppress()
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['zSphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['zSphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['zSphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.3)
mdb.models['Filtration'].parts['zSphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['zSphere'].regenerate()
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='Filtr_R30_octa', originalInstances=SUPPRESS)
# Save by Dima on Sun Apr 29 09:54:25 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Filtration'].parts['Filtr_R30_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R30_octa'].edges[8], MIDDLE), point2=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R30_octa'].edges[3], MIDDLE), point3=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R30_octa'].edges[1], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R30_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R30_octa'].edges[10], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R30_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R30_octa'].edges[21], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R30_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R30_octa'].edges[13], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R30_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R30_octa'].edges[37], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R30_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R30_octa'].edges[11], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R30_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R30_octa'].edges[35], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R30_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].vertices[15], point2=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].vertices[13], point3=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].vertices[25])
mdb.models['Filtration'].parts['Filtr_R30_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].vertices[29], point2=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].vertices[33], point3=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].vertices[27])
mdb.models['Filtration'].parts['Filtr_R30_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].vertices[11], point2=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].vertices[23], point3=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].vertices[3])
mdb.models['Filtration'].parts['Filtr_R30_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].vertices[30], point2=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].vertices[4], point3=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].vertices[31])
mdb.models['Filtration'].parts['Filtr_R30_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].vertices[34], point2=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].vertices[43], point3=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].vertices[33])
mdb.models['Filtration'].parts['Filtr_R30_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].vertices[40], point2=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].vertices[14], point3=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].vertices[32])
mdb.models['Filtration'].parts['Filtr_R30_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].faces.getSequenceFromMask(
    mask=('[#c9c2b71e #5bc78157 #4d7c9c1 #6cd32a #262d1b95 #75 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R30_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].faces.getSequenceFromMask(
    mask=('[#7ff873 #a91d0798 #e64133 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R30_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].faces.getSequenceFromMask(
    mask=('[#1e03c33f #283c ]', ), ))
# Save by Dima on Sun Apr 29 09:58:38 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Filtration'].parts['Filtr_R30_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R30_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R30_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R30_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R30_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R30_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R30_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.09)
mdb.models['Filtration'].parts['Filtr_R30_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R30_octa_M1627t', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
# Save by Dima on Sun Apr 29 10:00:33 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs.changeKey(fromName='Filtr_R34_octa-M1490T', toName=
    'Filtr_R34_octa-M1490t')
# Save by Dima on Sun Apr 29 10:01:57 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs.changeKey(fromName='Filtr_R34_octa-M1490t', toName=
    'Filtr_R34_octa_M1490t')
# Save by Dima on Sun Apr 29 10:04:45 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Filtration'].rootAssembly.features['Filtr_R30_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R66_octa-1'].resume()
# Save by Dima on Sun Apr 29 13:12:55 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Filtration'].rootAssembly.features['Filtr_R66_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.resumeFeatures(('Box-1', 'Sphere-1'))
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].parts['zSphere'].features['Solid revolve-1'].sketch)
mdb.models['Filtration'].parts['zSphere'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Filtration'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Filtration'].parts['zSphere'].features['Solid revolve-1'])
mdb.models['Filtration'].sketches['__edit__'].dimensions[0].setValues(value=
    0.5)
mdb.models['Filtration'].parts['zSphere'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Filtration'].sketches['__edit__'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['zSphere'].regenerate()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.models['Filtration'].rootAssembly.InstanceFromBooleanCut(cuttingInstances=(
    mdb.models['Filtration'].rootAssembly.instances['Sphere-1'], ), 
    instanceToBeCut=mdb.models['Filtration'].rootAssembly.instances['Box-1'], 
    name='Filtr_R50_octa', originalInstances=SUPPRESS)
mdb.models['Filtration'].parts['Filtr_R50_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R50_octa'].edges[10], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R50_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R50_octa'].edges[5], MIDDLE), point3=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R50_octa'].edges[3], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R50_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].cells.getSequenceFromMask(
    ('[#3 ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R50_octa'].edges[19], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R50_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R50_octa'].edges[27], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R50_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R50_octa'].edges[13], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R50_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].cells.getSequenceFromMask(
    ('[#f ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R50_octa'].edges[37], MIDDLE), 
    point2=mdb.models['Filtration'].parts['Filtr_R50_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R50_octa'].edges[25], MIDDLE), 
    point3=mdb.models['Filtration'].parts['Filtr_R50_octa'].InterestingPoint(
    mdb.models['Filtration'].parts['Filtr_R50_octa'].edges[41], MIDDLE))
mdb.models['Filtration'].parts['Filtr_R50_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].vertices[16], point2=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].vertices[18], point3=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].vertices[12])
mdb.models['Filtration'].parts['Filtr_R50_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].cells.getSequenceFromMask(
    ('[#fff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].vertices[21], point2=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].vertices[20], point3=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].vertices[25])
mdb.models['Filtration'].parts['Filtr_R50_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].cells.getSequenceFromMask(
    ('[#ffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].vertices[5], point2=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].vertices[21], point3=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].vertices[9])
mdb.models['Filtration'].parts['Filtr_R50_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].cells.getSequenceFromMask(
    ('[#ffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].vertices[27], point2=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].vertices[32], point3=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].vertices[29])
mdb.models['Filtration'].parts['Filtr_R50_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].cells.getSequenceFromMask(
    ('[#ffffffff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].vertices[1], point2=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].vertices[28], point3=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].vertices[8])
mdb.models['Filtration'].parts['Filtr_R50_octa'].PartitionCellByPlaneThreePoints(
    cells=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].cells.getSequenceFromMask(
    ('[#ffffffff #ff ]', ), ), point1=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].vertices[37], point2=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].vertices[26], point3=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].vertices[41])
mdb.models['Filtration'].parts['Filtr_R50_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].faces.getSequenceFromMask(
    mask=('[#38429f0f #c3f1ef38 #f8d83841 #4aa5329 #7c3663b5 #21 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R50_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].faces.getSequenceFromMask(
    mask=('[#3cfff800 #1de20798 #9cd056 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R50_octa'].RemoveFaces(deleteCells=False, 
    faceList=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].faces.getSequenceFromMask(
    mask=('[#1ffc070c #2872 ]', ), ))
mdb.models['Filtration'].parts['Filtr_R50_octa'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Filtration'].parts['Filtr_R50_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), technique=FREE)
mdb.models['Filtration'].parts['Filtr_R50_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Filtration'].parts['Filtr_R50_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R50_octa'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Filtration'].parts['Filtr_R50_octa'].cells.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Filtration'].parts['Filtr_R50_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.09)
mdb.models['Filtration'].parts['Filtr_R50_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R50_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R50_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.08)
mdb.models['Filtration'].parts['Filtr_R50_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R50_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R50_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.078)
mdb.models['Filtration'].parts['Filtr_R50_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R50_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R50_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.075)
mdb.models['Filtration'].parts['Filtr_R50_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R50_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R50_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.074)
mdb.models['Filtration'].parts['Filtr_R50_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R50_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R50_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.072)
mdb.models['Filtration'].parts['Filtr_R50_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R50_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R50_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.07)
mdb.models['Filtration'].parts['Filtr_R50_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=50, memoryUnits=
    PERCENTAGE, model='Filtration', modelPrint=OFF, multiprocessingMode=DEFAULT
    , name='Filtr_R50_octa_M1579t', nodalOutputPrecision=SINGLE, numCpus=1, 
    numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
# Save by Dima on Sun Apr 29 20:17:57 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Filtration'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Filtration'].sketches['Sketch-1'])
del mdb.models['Filtration'].sketches['__edit__']
mdb.models['Filtration'].parts['Filtr_R30_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R30_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.1)
mdb.models['Filtration'].parts['Filtr_R30_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R30_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R30_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.12)
mdb.models['Filtration'].parts['Filtr_R30_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R30_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R30_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.11)
mdb.models['Filtration'].parts['Filtr_R30_octa'].generateMesh()
mdb.jobs.changeKey(fromName='Filtr_R30_octa_M1627t', toName=
    'Filtr_R30_octa_M994t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R50_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R30_octa-1'].resume()
mdb.models['Filtration'].rootAssembly.features['Filtr_R30_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R32_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R32_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R32_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.11)
mdb.models['Filtration'].parts['Filtr_R32_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R32_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R32_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.1)
mdb.models['Filtration'].parts['Filtr_R32_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R32_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R32_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.105)
mdb.models['Filtration'].parts['Filtr_R32_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Filtr_R32_octa_M1546t', toName=
    'Filtr_R32_octa_M987t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R32_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R34_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R34_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R34_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.1)
mdb.models['Filtration'].parts['Filtr_R34_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Filtr_R34_octa_M1490t', toName=
    'Filtr_R34_octa_M975t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R34_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R36_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R36_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R36_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.095)
mdb.models['Filtration'].parts['Filtr_R36_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R36_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R36_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.098)
mdb.models['Filtration'].parts['Filtr_R36_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R36_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R36_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.1)
mdb.models['Filtration'].parts['Filtr_R36_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Filtr_R36_octa_M1502t', toName=
    'Filtr_R36_octa_M877t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R36_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Fltr_R38_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R38_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R38_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.095)
mdb.models['Filtration'].parts['Filtr_R38_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Filtr_R38_octa_M1403t', toName=
    'Filtr_R38_octa_M923t')
mdb.models['Filtration'].rootAssembly.features['Fltr_R38_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R40_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R40_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R40_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.09)
mdb.models['Filtration'].parts['Filtr_R40_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R40_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R40_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.095)
mdb.models['Filtration'].parts['Filtr_R40_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
del mdb.jobs['Filtr_R40_octa_M1248']
mdb.jobs.changeKey(fromName='Filtr_R40_octa_M1609t', toName=
    'Filtr_R40_octa_M953t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R40_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R42_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R42_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R42_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.095)
mdb.models['Filtration'].parts['Filtr_R42_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
del mdb.jobs['Filtr_R42_octa_M1632']
mdb.jobs.changeKey(fromName='Filtr_R42_octa_M1204t', toName=
    'Filtr_R42_octa_M938t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R42_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R44_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R44_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R44_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.09)
mdb.models['Filtration'].parts['Filtr_R44_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R44_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R44_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.092)
mdb.models['Filtration'].parts['Filtr_R44_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
del mdb.jobs['Filtr_R44_octa_M1458']
mdb.jobs.changeKey(fromName='Filtr_R44_octa_M1260t', toName=
    'Filtr_R44_octa_M967t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R44_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R46_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R46_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R46_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.09)
mdb.models['Filtration'].parts['Filtr_R46_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R46_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R46_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.092)
mdb.models['Filtration'].parts['Filtr_R46_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R46_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R46_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.091)
mdb.models['Filtration'].parts['Filtr_R46_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R46_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R46_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0905)
mdb.models['Filtration'].parts['Filtr_R46_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R46_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R46_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.09)
mdb.models['Filtration'].parts['Filtr_R46_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R46_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R46_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0908)
mdb.models['Filtration'].parts['Filtr_R46_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
del mdb.jobs['Filtr_R46_octa_M1800']
mdb.jobs.changeKey(fromName='Filtr_R46_octa_M1662t', toName=
    'Filtr_R46_octa_M1014t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R46_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R48_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R48_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R48_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.09)
mdb.models['Filtration'].parts['Filtr_R48_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
del mdb.jobs['Filtr_R48_octa_M1818']
mdb.jobs.changeKey(fromName='Filtr_R48_octa_M1515t', toName=
    'Filtr_R48_octa_M907t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R48_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R30_octa-1'].resume()
mdb.models['Filtration'].rootAssembly.features['Filtr_R30_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R50_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R50_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R50_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.085)
mdb.models['Filtration'].parts['Filtr_R50_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Filtr_R50_octa_M1579t', toName=
    'Filtr_R50_octa_M953t')
del mdb.jobs['Filtr_R52_octa_M1408']
del mdb.jobs['Filtr_R54_octa_M1564']
del mdb.jobs['Filtr_R56_octa_M1566']
del mdb.jobs['Filtr_R58_octa_M1440']
del mdb.jobs['Filtr_R60_octa_M1216']
del mdb.jobs['Filtr_R62_octa_M1224']
del mdb.jobs['Filtr_R64_octa_M1260']
del mdb.jobs['Filtr_R66_octa_M1144']
del mdb.jobs['Filtr_R68_octa_M1618']
del mdb.jobs['Filtr_R70_octa_M1296']
mdb.models['Filtration'].rootAssembly.features['Filtr_R50_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R52_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R52_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.08)
mdb.models['Filtration'].parts['Filtr_R52_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.085)
mdb.models['Filtration'].parts['Filtr_R52_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.075)
mdb.models['Filtration'].parts['Filtr_R52_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.079)
mdb.models['Filtration'].parts['Filtr_R52_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.078)
mdb.models['Filtration'].parts['Filtr_R52_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.079)
mdb.models['Filtration'].parts['Filtr_R52_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0778)
mdb.models['Filtration'].parts['Filtr_R52_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.077)
mdb.models['Filtration'].parts['Filtr_R52_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.076)
mdb.models['Filtration'].parts['Filtr_R52_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0765)
mdb.models['Filtration'].parts['Filtr_R52_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0768)
mdb.models['Filtration'].parts['Filtr_R52_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0769)
mdb.models['Filtration'].parts['Filtr_R52_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.07695)
mdb.models['Filtration'].parts['Filtr_R52_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R52_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.07692)
mdb.models['Filtration'].parts['Filtr_R52_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Filtr_R53_octa_M1601t', toName=
    'Filtr_R52_octa_M1028t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R52_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R54_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R54_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.07)
mdb.models['Filtration'].parts['Filtr_R54_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.065)
mdb.models['Filtration'].parts['Filtr_R54_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.068)
mdb.models['Filtration'].parts['Filtr_R54_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.069)
mdb.models['Filtration'].parts['Filtr_R54_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R54_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0692)
mdb.models['Filtration'].parts['Filtr_R54_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Filtr_R56_octa_M1634t', toName=
    'Filtr_R56_octa_M955t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R54_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R56_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R56_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R56_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.068)
mdb.models['Filtration'].parts['Filtr_R56_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R56_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R56_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.069)
mdb.models['Filtration'].parts['Filtr_R56_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Filtr_R58__octa_M1196t', toName=
    'Filtr_R58__octa_M987t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R56_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R58_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R58_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R58_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.069)
mdb.models['Filtration'].parts['Filtr_R58_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R58_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R58_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.068)
mdb.models['Filtration'].parts['Filtr_R58_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R58_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R58_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.067)
mdb.models['Filtration'].parts['Filtr_R58_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R58_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R58_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.065)
mdb.models['Filtration'].parts['Filtr_R58_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R58_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R58_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.067)
mdb.models['Filtration'].parts['Filtr_R58_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R58_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R58_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0668)
mdb.models['Filtration'].parts['Filtr_R58_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R58_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R58_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0667)
mdb.models['Filtration'].parts['Filtr_R58_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.models['Filtration'].rootAssembly.features['Filtr_R58_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R54_octa-1'].resume()
mdb.jobs.changeKey(fromName='Filtr_R54_octa_M1848t', toName=
    'Filtr_R54_octa_M955t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R54_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R56_octa-1'].resume()
mdb.jobs.changeKey(fromName='Filtr_R56_octa_M955t', toName=
    'Filtr_R56_octa_M987t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R56_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R54_octa-1'].resume()
mdb.models['Filtration'].rootAssembly.features['Filtr_R54_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R58_octa-1'].resume()
mdb.jobs.changeKey(fromName='Filtr_R58__octa_M987t', toName=
    'Filtr_R58__octa_M822t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R58_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R60_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R60_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R60_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.06)
mdb.models['Filtration'].parts['Filtr_R60_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Filtr_R60_octa_M1618t', toName=
    'Filtr_R60_octa_M1014t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R60_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R62_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R62_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R62_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.055)
mdb.models['Filtration'].parts['Filtr_R62_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R62_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R62_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.059)
mdb.models['Filtration'].parts['Filtr_R62_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R62_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R62_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.058)
mdb.models['Filtration'].parts['Filtr_R62_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R62_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R62_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0585)
mdb.models['Filtration'].parts['Filtr_R62_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Filtr_R62_octa_M1509t', toName=
    'Filtr_R62_octa_M1014t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R62_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R64_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.058)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.057)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.056)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.053)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.052)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0528)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0525)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0526)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05258)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0525)
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05256)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05252)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05257)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05258)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05259)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0526)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R64_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05268)
mdb.models['Filtration'].parts['Filtr_R64_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Filtr_R64_octa_M1643t', toName=
    'Filtr_R64_octa_M943t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R64_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R66_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R66_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R66_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.055)
mdb.models['Filtration'].parts['Filtr_R66_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R66_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R66_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05)
mdb.models['Filtration'].parts['Filtr_R66_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R66_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R66_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0495)
mdb.models['Filtration'].parts['Filtr_R66_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R66_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R66_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.049)
mdb.models['Filtration'].parts['Filtr_R66_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R66_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R66_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.048)
mdb.models['Filtration'].parts['Filtr_R66_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R66_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R66_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.047)
mdb.models['Filtration'].parts['Filtr_R66_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R66_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R66_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0476)
mdb.models['Filtration'].parts['Filtr_R66_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R66_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R66_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0478)
mdb.models['Filtration'].parts['Filtr_R66_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Filtr_R66_octa_M1673t', toName=
    'Filtr_R66_octa_M914t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R66_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R68_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R68_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R68_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.04)
mdb.models['Filtration'].parts['Filtr_R68_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R68_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R68_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.042)
mdb.models['Filtration'].parts['Filtr_R68_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Filtr_R68_octa_M1540t', toName=
    'Filtr_R68_octa_M1012t')
mdb.models['Filtration'].rootAssembly.features['Filtr_R68_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R70_octa-1'].resume()
mdb.models['Filtration'].parts['Filtr_R70_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R70_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.04)
mdb.models['Filtration'].parts['Filtr_R70_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R70_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R70_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.038)
mdb.models['Filtration'].parts['Filtr_R70_octa'].generateMesh()
mdb.models['Filtration'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='Filtr_R70_octa_M1443t', toName=
    'Filtr_R70_octa_M921t')
# Save by Dima on Thu May 03 13:29:23 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Filtration'].rootAssembly.features['Filtr_R70_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R42_octa-1'].resume()
# Save by Dima on Thu May 03 13:39:39 2012
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Filtration'].parts['Filtr_R32_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R32_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.03)
mdb.models['Filtration'].parts['Filtr_R32_octa'].generateMesh()
mdb.models['Filtration'].parts['Filtr_R32_octa'].deleteMesh()
mdb.models['Filtration'].parts['Filtr_R32_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.06)
mdb.models['Filtration'].parts['Filtr_R32_octa'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.2)
mdb.models['Filtration'].parts['Filtr_R32_octa'].generateMesh()
mdb.Job(name='Filtr_R32_octa_M210t', objectToCopy=
    mdb.jobs['Filtr_R32_octa_M987t'])
mdb.jobs['Filtr_R32_octa_M210t'].setValues(model='Filtration')
mdb.models['Filtration'].rootAssembly.features['Filtr_R42_octa-1'].suppress()
mdb.models['Filtration'].rootAssembly.features['Filtr_R32_octa-1'].resume()
# Save by Dima on Thu May 03 18:31:35 2012
